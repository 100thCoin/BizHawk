Besides the main Bizhawk.sln, there are a number of other projects, each with its own build method.  To develop on Bizhawk, you do not need to build these other projects, as they are included prebuilt in GIT.  You need only build them if you want to modify the cores themselves.

When "vs2019" is mentioned, this means Microsoft(R) Visual(R) Studio(R)(R) 2019(TM) using the latest version with all the normal toolchains installed.
Unless otherwise specified, the build process consists simply of building the sln; the dlls are automatically output to the appropriate place.

When "mingw" is mentioned, this means a 64 bit gcc setup installed by https://www.msys2.org/.

----------------------------------
BUILDING .DLL FOR WINDOWS:

lynx: There is a vs2019 solution at lynx/msvc/bizlynx.sln
wonderswan: There is a vs2019 solution at wonderswan/msvc/bizswan.sln
libretrobridge: There is a vs2019 solution at LibretroBridge/msvc/LibretroBridge.sln
libgambatte: There is a vs2019 solution at libgambatte/libgambatte.sln.
octoshock (psx): There is a vs2019 solution at psx/octoshock/bizhawk/octoshock.sln

libmupen64plus: ??

quicknes: Process quicknes/mingw/Makefile with mingw.  Use "make install" top copy to output folder.

melonds: ??
mgba: mingw

waterbox:  See separate document waterbox/readme.txt

libdarm: stock build from https://github.com/jbremer/darm.git   71a027e0ffb2171d01213c6ecc6da1c49e158398 ????

----------------------------------
BUILDING .SO FOR LINUX
-TBD-

----------------------------------
BUILDING .DYLIB FOR MACOS
-TBD-
