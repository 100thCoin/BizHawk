// Based on glad.h in melonDS/src/frontend/glad

#ifndef BIZOGL_H
#define BIZOGL_H

#ifdef __gl_h_
#error OpenGL header already included, remove this include, BizOGL already provides it
#endif

#define __gl_h_

#include <stdint.h>

#include <emulibc.h>

namespace BizOGL
{

using LoadGLProc = void* (*)(const char* proc);

enum class LoadGLVersion
{
	V3_2,
	V4_3,
};

void LoadGL(LoadGLProc load, LoadGLVersion version, bool isWinApi);

}

#define GLAPI ECL_INVISIBLE extern "C"

GLAPI bool IsWinAPI;
#define WRAP_PFN(pfn, ...) (IsWinAPI ? ((__attribute__((ms_abi)) decltype(pfn))pfn)(__VA_ARGS__) : pfn(__VA_ARGS__))

typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef int8_t GLbyte;
typedef uint8_t GLubyte;
typedef int16_t GLshort;
typedef uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef int32_t GLclampx;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void * GLeglClientBufferEXT;
typedef void * GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
typedef unsigned int GLhandleARB;
typedef uint16_t GLhalf;
typedef uint16_t GLhalfARB;
typedef int32_t GLfixed;
typedef intptr_t GLintptr;
typedef intptr_t GLintptrARB;
typedef intptr_t GLsizeiptr;
typedef intptr_t GLsizeiptrARB;
typedef int64_t GLint64;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync * GLsync;

typedef void (*GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_FALSE 0
#define GL_TRUE 1
#define GL_POINTS 0x0000
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_STRIP 0x0003
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_FAN 0x0006
#define GL_NEVER 0x0200
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_ZERO 0
#define GL_ONE 1
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_NONE 0
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_NO_ERROR 0
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_OUT_OF_MEMORY 0x0505
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_VIEWPORT 0x0BA2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_DRAW_BUFFER 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_TEXTURE 0x1702
#define GL_COLOR 0x1800
#define GL_DEPTH 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_INDEX 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_GREEN 0x1904
#define GL_BLUE 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_POINT 0x1B00
#define GL_LINE 0x1B01
#define GL_FILL 0x1B02
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_REPEAT 0x2901
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_DOUBLE 0x140A
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_R3_G3_B2 0x2A10
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB8 0x8051
#define GL_RGB10 0x8052
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGBA8 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_MULTISAMPLE 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_INCR_WRAP 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_EQUATION 0x8009
#define GL_CONSTANT_COLOR 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_MIN 0x8007
#define GL_MAX 0x8008
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_CURRENT_QUERY 0x8865
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_ARRAY_BUFFER 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_READ_ONLY 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_SAMPLES_PASSED 0x8914
#define GL_SRC1_ALPHA 0x8589
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_DELETE_STATUS 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_RGBA32F 0x8814
#define GL_RGB32F 0x8815
#define GL_RGBA16F 0x881A
#define GL_RGB16F 0x881B
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_RGB9_E5 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_RGBA32UI 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGBA16UI 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGBA8UI 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGBA32I 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGBA16I 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGBA8I 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RED_INTEGER 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_RGB_INTEGER 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_HALF_FLOAT 0x140B
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_RG 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R16 0x822A
#define GL_RG8 0x822B
#define GL_RG16 0x822C
#define GL_R16F 0x822D
#define GL_R32F 0x822E
#define GL_RG16F 0x822F
#define GL_RG32F 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_DEPTH_CLAMP 0x864F
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_SIGNALED 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_SRC1_COLOR 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_SAMPLER_BINDING 0x8919
#define GL_RGB10_A2UI 0x906F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIMESTAMP 0x8E28
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_SAMPLE_SHADING 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_PATCHES 0x000E
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_QUADS 0x0007
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_FIXED 0x140C
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RGB565 0x8D62
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_MAX_VIEWPORTS 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_BUFFER 0x82E0
#define GL_SHADER 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_VERTEX_ARRAY 0x8074
#define GL_QUERY 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_SAMPLER 0x82E6
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_IS_PER_PATCH 0x92E7
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_DISPLAY_LIST 0x82E7
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STACK_OVERFLOW 0x0503

#define GL_VERSION_1_0 1
typedef void (*PFNGLCULLFACEPROC)(GLenum mode);
GLAPI PFNGLCULLFACEPROC biz_glCullFace;
#define glCullFace(...) WRAP_PFN(biz_glCullFace, __VA_ARGS__)
typedef void (*PFNGLFRONTFACEPROC)(GLenum mode);
GLAPI PFNGLFRONTFACEPROC biz_glFrontFace;
#define glFrontFace(...) WRAP_PFN(biz_glFrontFace, __VA_ARGS__)
typedef void (*PFNGLHINTPROC)(GLenum target, GLenum mode);
GLAPI PFNGLHINTPROC biz_glHint;
#define glHint(...) WRAP_PFN(biz_glHint, __VA_ARGS__)
typedef void (*PFNGLLINEWIDTHPROC)(GLfloat width);
GLAPI PFNGLLINEWIDTHPROC biz_glLineWidth;
#define glLineWidth(...) WRAP_PFN(biz_glLineWidth, __VA_ARGS__)
typedef void (*PFNGLPOINTSIZEPROC)(GLfloat size);
GLAPI PFNGLPOINTSIZEPROC biz_glPointSize;
#define glPointSize(...) WRAP_PFN(biz_glPointSize, __VA_ARGS__)
typedef void (*PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
GLAPI PFNGLPOLYGONMODEPROC biz_glPolygonMode;
#define glPolygonMode(...) WRAP_PFN(biz_glPolygonMode, __VA_ARGS__)
typedef void (*PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLSCISSORPROC biz_glScissor;
#define glScissor(...) WRAP_PFN(biz_glScissor, __VA_ARGS__)
typedef void (*PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
GLAPI PFNGLTEXPARAMETERFPROC biz_glTexParameterf;
#define glTexParameterf(...) WRAP_PFN(biz_glTexParameterf, __VA_ARGS__)
typedef void (*PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
GLAPI PFNGLTEXPARAMETERFVPROC biz_glTexParameterfv;
#define glTexParameterfv(...) WRAP_PFN(biz_glTexParameterfv, __VA_ARGS__)
typedef void (*PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLTEXPARAMETERIPROC biz_glTexParameteri;
#define glTexParameteri(...) WRAP_PFN(biz_glTexParameteri, __VA_ARGS__)
typedef void (*PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint *params);
GLAPI PFNGLTEXPARAMETERIVPROC biz_glTexParameteriv;
#define glTexParameteriv(...) WRAP_PFN(biz_glTexParameteriv, __VA_ARGS__)
typedef void (*PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXIMAGE1DPROC biz_glTexImage1D;
#define glTexImage1D(...) WRAP_PFN(biz_glTexImage1D, __VA_ARGS__)
typedef void (*PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXIMAGE2DPROC biz_glTexImage2D;
#define glTexImage2D(...) WRAP_PFN(biz_glTexImage2D, __VA_ARGS__)
typedef void (*PFNGLDRAWBUFFERPROC)(GLenum buf);
GLAPI PFNGLDRAWBUFFERPROC biz_glDrawBuffer;
#define glDrawBuffer(...) WRAP_PFN(biz_glDrawBuffer, __VA_ARGS__)
typedef void (*PFNGLCLEARPROC)(GLbitfield mask);
GLAPI PFNGLCLEARPROC biz_glClear;
#define glClear(...) WRAP_PFN(biz_glClear, __VA_ARGS__)
typedef void (*PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLCLEARCOLORPROC biz_glClearColor;
#define glClearColor(...) WRAP_PFN(biz_glClearColor, __VA_ARGS__)
typedef void (*PFNGLCLEARSTENCILPROC)(GLint s);
GLAPI PFNGLCLEARSTENCILPROC biz_glClearStencil;
#define glClearStencil(...) WRAP_PFN(biz_glClearStencil, __VA_ARGS__)
typedef void (*PFNGLCLEARDEPTHPROC)(GLdouble depth);
GLAPI PFNGLCLEARDEPTHPROC biz_glClearDepth;
#define glClearDepth(...) WRAP_PFN(biz_glClearDepth, __VA_ARGS__)
typedef void (*PFNGLSTENCILMASKPROC)(GLuint mask);
GLAPI PFNGLSTENCILMASKPROC biz_glStencilMask;
#define glStencilMask(...) WRAP_PFN(biz_glStencilMask, __VA_ARGS__)
typedef void (*PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLAPI PFNGLCOLORMASKPROC biz_glColorMask;
#define glColorMask(...) WRAP_PFN(biz_glColorMask, __VA_ARGS__)
typedef void (*PFNGLDEPTHMASKPROC)(GLboolean flag);
GLAPI PFNGLDEPTHMASKPROC biz_glDepthMask;
#define glDepthMask(...) WRAP_PFN(biz_glDepthMask, __VA_ARGS__)
typedef void (*PFNGLDISABLEPROC)(GLenum cap);
GLAPI PFNGLDISABLEPROC biz_glDisable;
#define glDisable(...) WRAP_PFN(biz_glDisable, __VA_ARGS__)
typedef void (*PFNGLENABLEPROC)(GLenum cap);
GLAPI PFNGLENABLEPROC biz_glEnable;
#define glEnable(...) WRAP_PFN(biz_glEnable, __VA_ARGS__)
typedef void (*PFNGLFINISHPROC)(void);
GLAPI PFNGLFINISHPROC biz_glFinish;
#define glFinish(...) WRAP_PFN(biz_glFinish, __VA_ARGS__)
typedef void (*PFNGLFLUSHPROC)(void);
GLAPI PFNGLFLUSHPROC biz_glFlush;
#define glFlush(...) WRAP_PFN(biz_glFlush, __VA_ARGS__)
typedef void (*PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
GLAPI PFNGLBLENDFUNCPROC biz_glBlendFunc;
#define glBlendFunc(...) WRAP_PFN(biz_glBlendFunc, __VA_ARGS__)
typedef void (*PFNGLLOGICOPPROC)(GLenum opcode);
GLAPI PFNGLLOGICOPPROC biz_glLogicOp;
#define glLogicOp(...) WRAP_PFN(biz_glLogicOp, __VA_ARGS__)
typedef void (*PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
GLAPI PFNGLSTENCILFUNCPROC biz_glStencilFunc;
#define glStencilFunc(...) WRAP_PFN(biz_glStencilFunc, __VA_ARGS__)
typedef void (*PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
GLAPI PFNGLSTENCILOPPROC biz_glStencilOp;
#define glStencilOp(...) WRAP_PFN(biz_glStencilOp, __VA_ARGS__)
typedef void (*PFNGLDEPTHFUNCPROC)(GLenum func);
GLAPI PFNGLDEPTHFUNCPROC biz_glDepthFunc;
#define glDepthFunc(...) WRAP_PFN(biz_glDepthFunc, __VA_ARGS__)
typedef void (*PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPIXELSTOREFPROC biz_glPixelStoref;
#define glPixelStoref(...) WRAP_PFN(biz_glPixelStoref, __VA_ARGS__)
typedef void (*PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
GLAPI PFNGLPIXELSTOREIPROC biz_glPixelStorei;
#define glPixelStorei(...) WRAP_PFN(biz_glPixelStorei, __VA_ARGS__)
typedef void (*PFNGLREADBUFFERPROC)(GLenum src);
GLAPI PFNGLREADBUFFERPROC biz_glReadBuffer;
#define glReadBuffer(...) WRAP_PFN(biz_glReadBuffer, __VA_ARGS__)
typedef void (*PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
GLAPI PFNGLREADPIXELSPROC biz_glReadPixels;
#define glReadPixels(...) WRAP_PFN(biz_glReadPixels, __VA_ARGS__)
typedef void (*PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean *data);
GLAPI PFNGLGETBOOLEANVPROC biz_glGetBooleanv;
#define glGetBooleanv(...) WRAP_PFN(biz_glGetBooleanv, __VA_ARGS__)
typedef void (*PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble *data);
GLAPI PFNGLGETDOUBLEVPROC biz_glGetDoublev;
#define glGetDoublev(...) WRAP_PFN(biz_glGetDoublev, __VA_ARGS__)
typedef GLenum (*PFNGLGETERRORPROC)(void);
GLAPI PFNGLGETERRORPROC biz_glGetError;
#define glGetError(...) WRAP_PFN(biz_glGetError, __VA_ARGS__)
typedef void (*PFNGLGETFLOATVPROC)(GLenum pname, GLfloat *data);
GLAPI PFNGLGETFLOATVPROC biz_glGetFloatv;
#define glGetFloatv(...) WRAP_PFN(biz_glGetFloatv, __VA_ARGS__)
typedef void (*PFNGLGETINTEGERVPROC)(GLenum pname, GLint *data);
GLAPI PFNGLGETINTEGERVPROC biz_glGetIntegerv;
#define glGetIntegerv(...) WRAP_PFN(biz_glGetIntegerv, __VA_ARGS__)
typedef const GLubyte * (*PFNGLGETSTRINGPROC)(GLenum name);
GLAPI PFNGLGETSTRINGPROC biz_glGetString;
#define glGetString(...) WRAP_PFN(biz_glGetString, __VA_ARGS__)
typedef void (*PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
GLAPI PFNGLGETTEXIMAGEPROC biz_glGetTexImage;
#define glGetTexImage(...) WRAP_PFN(biz_glGetTexImage, __VA_ARGS__)
typedef void (*PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
GLAPI PFNGLGETTEXPARAMETERFVPROC biz_glGetTexParameterfv;
#define glGetTexParameterfv(...) WRAP_PFN(biz_glGetTexParameterfv, __VA_ARGS__)
typedef void (*PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
GLAPI PFNGLGETTEXPARAMETERIVPROC biz_glGetTexParameteriv;
#define glGetTexParameteriv(...) WRAP_PFN(biz_glGetTexParameteriv, __VA_ARGS__)
typedef void (*PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat *params);
GLAPI PFNGLGETTEXLEVELPARAMETERFVPROC biz_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv(...) WRAP_PFN(biz_glGetTexLevelParameterfv, __VA_ARGS__)
typedef void (*PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint *params);
GLAPI PFNGLGETTEXLEVELPARAMETERIVPROC biz_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv(...) WRAP_PFN(biz_glGetTexLevelParameteriv, __VA_ARGS__)
typedef GLboolean (*PFNGLISENABLEDPROC)(GLenum cap);
GLAPI PFNGLISENABLEDPROC biz_glIsEnabled;
#define glIsEnabled(...) WRAP_PFN(biz_glIsEnabled, __VA_ARGS__)
typedef void (*PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
GLAPI PFNGLDEPTHRANGEPROC biz_glDepthRange;
#define glDepthRange(...) WRAP_PFN(biz_glDepthRange, __VA_ARGS__)
typedef void (*PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLVIEWPORTPROC biz_glViewport;
#define glViewport(...) WRAP_PFN(biz_glViewport, __VA_ARGS__)

#define GL_VERSION_1_1 1
typedef void (*PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
GLAPI PFNGLDRAWARRAYSPROC biz_glDrawArrays;
#define glDrawArrays(...) WRAP_PFN(biz_glDrawArrays, __VA_ARGS__)
typedef void (*PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices);
GLAPI PFNGLDRAWELEMENTSPROC biz_glDrawElements;
#define glDrawElements(...) WRAP_PFN(biz_glDrawElements, __VA_ARGS__)
typedef void (*PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
GLAPI PFNGLPOLYGONOFFSETPROC biz_glPolygonOffset;
#define glPolygonOffset(...) WRAP_PFN(biz_glPolygonOffset, __VA_ARGS__)
typedef void (*PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI PFNGLCOPYTEXIMAGE1DPROC biz_glCopyTexImage1D;
#define glCopyTexImage1D(...) WRAP_PFN(biz_glCopyTexImage1D, __VA_ARGS__)
typedef void (*PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI PFNGLCOPYTEXIMAGE2DPROC biz_glCopyTexImage2D;
#define glCopyTexImage2D(...) WRAP_PFN(biz_glCopyTexImage2D, __VA_ARGS__)
typedef void (*PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYTEXSUBIMAGE1DPROC biz_glCopyTexSubImage1D;
#define glCopyTexSubImage1D(...) WRAP_PFN(biz_glCopyTexSubImage1D, __VA_ARGS__)
typedef void (*PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXSUBIMAGE2DPROC biz_glCopyTexSubImage2D;
#define glCopyTexSubImage2D(...) WRAP_PFN(biz_glCopyTexSubImage2D, __VA_ARGS__)
typedef void (*PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXSUBIMAGE1DPROC biz_glTexSubImage1D;
#define glTexSubImage1D(...) WRAP_PFN(biz_glTexSubImage1D, __VA_ARGS__)
typedef void (*PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXSUBIMAGE2DPROC biz_glTexSubImage2D;
#define glTexSubImage2D(...) WRAP_PFN(biz_glTexSubImage2D, __VA_ARGS__)
typedef void (*PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
GLAPI PFNGLBINDTEXTUREPROC biz_glBindTexture;
#define glBindTexture(...) WRAP_PFN(biz_glBindTexture, __VA_ARGS__)
typedef void (*PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint *textures);
GLAPI PFNGLDELETETEXTURESPROC biz_glDeleteTextures;
#define glDeleteTextures(...) WRAP_PFN(biz_glDeleteTextures, __VA_ARGS__)
typedef void (*PFNGLGENTEXTURESPROC)(GLsizei n, GLuint *textures);
GLAPI PFNGLGENTEXTURESPROC biz_glGenTextures;
#define glGenTextures(...) WRAP_PFN(biz_glGenTextures, __VA_ARGS__)
typedef GLboolean (*PFNGLISTEXTUREPROC)(GLuint texture);
GLAPI PFNGLISTEXTUREPROC biz_glIsTexture;
#define glIsTexture(...) WRAP_PFN(biz_glIsTexture, __VA_ARGS__)

#define GL_VERSION_1_2 1
typedef void (*PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
GLAPI PFNGLDRAWRANGEELEMENTSPROC biz_glDrawRangeElements;
#define glDrawRangeElements(...) WRAP_PFN(biz_glDrawRangeElements, __VA_ARGS__)
typedef void (*PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXIMAGE3DPROC biz_glTexImage3D;
#define glTexImage3D(...) WRAP_PFN(biz_glTexImage3D, __VA_ARGS__)
typedef void (*PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXSUBIMAGE3DPROC biz_glTexSubImage3D;
#define glTexSubImage3D(...) WRAP_PFN(biz_glTexSubImage3D, __VA_ARGS__)
typedef void (*PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXSUBIMAGE3DPROC biz_glCopyTexSubImage3D;
#define glCopyTexSubImage3D(...) WRAP_PFN(biz_glCopyTexSubImage3D, __VA_ARGS__)

#define GL_VERSION_1_3 1
typedef void (*PFNGLACTIVETEXTUREPROC)(GLenum texture);
GLAPI PFNGLACTIVETEXTUREPROC biz_glActiveTexture;
#define glActiveTexture(...) WRAP_PFN(biz_glActiveTexture, __VA_ARGS__)
typedef void (*PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
GLAPI PFNGLSAMPLECOVERAGEPROC biz_glSampleCoverage;
#define glSampleCoverage(...) WRAP_PFN(biz_glSampleCoverage, __VA_ARGS__)
typedef void (*PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE3DPROC biz_glCompressedTexImage3D;
#define glCompressedTexImage3D(...) WRAP_PFN(biz_glCompressedTexImage3D, __VA_ARGS__)
typedef void (*PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE2DPROC biz_glCompressedTexImage2D;
#define glCompressedTexImage2D(...) WRAP_PFN(biz_glCompressedTexImage2D, __VA_ARGS__)
typedef void (*PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE1DPROC biz_glCompressedTexImage1D;
#define glCompressedTexImage1D(...) WRAP_PFN(biz_glCompressedTexImage1D, __VA_ARGS__)
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC biz_glCompressedTexSubImage3D;
#define glCompressedTexSubImage3D(...) WRAP_PFN(biz_glCompressedTexSubImage3D, __VA_ARGS__)
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC biz_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D(...) WRAP_PFN(biz_glCompressedTexSubImage2D, __VA_ARGS__)
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC biz_glCompressedTexSubImage1D;
#define glCompressedTexSubImage1D(...) WRAP_PFN(biz_glCompressedTexSubImage1D, __VA_ARGS__)
typedef void (*PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void *img);
GLAPI PFNGLGETCOMPRESSEDTEXIMAGEPROC biz_glGetCompressedTexImage;
#define glGetCompressedTexImage(...) WRAP_PFN(biz_glGetCompressedTexImage, __VA_ARGS__)

#define GL_VERSION_1_4 1
typedef void (*PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GLAPI PFNGLBLENDFUNCSEPARATEPROC biz_glBlendFuncSeparate;
#define glBlendFuncSeparate(...) WRAP_PFN(biz_glBlendFuncSeparate, __VA_ARGS__)
typedef void (*PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
GLAPI PFNGLMULTIDRAWARRAYSPROC biz_glMultiDrawArrays;
#define glMultiDrawArrays(...) WRAP_PFN(biz_glMultiDrawArrays, __VA_ARGS__)
typedef void (*PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
GLAPI PFNGLMULTIDRAWELEMENTSPROC biz_glMultiDrawElements;
#define glMultiDrawElements(...) WRAP_PFN(biz_glMultiDrawElements, __VA_ARGS__)
typedef void (*PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPOINTPARAMETERFPROC biz_glPointParameterf;
#define glPointParameterf(...) WRAP_PFN(biz_glPointParameterf, __VA_ARGS__)
typedef void (*PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat *params);
GLAPI PFNGLPOINTPARAMETERFVPROC biz_glPointParameterfv;
#define glPointParameterfv(...) WRAP_PFN(biz_glPointParameterfv, __VA_ARGS__)
typedef void (*PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
GLAPI PFNGLPOINTPARAMETERIPROC biz_glPointParameteri;
#define glPointParameteri(...) WRAP_PFN(biz_glPointParameteri, __VA_ARGS__)
typedef void (*PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint *params);
GLAPI PFNGLPOINTPARAMETERIVPROC biz_glPointParameteriv;
#define glPointParameteriv(...) WRAP_PFN(biz_glPointParameteriv, __VA_ARGS__)
typedef void (*PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLBLENDCOLORPROC biz_glBlendColor;
#define glBlendColor(...) WRAP_PFN(biz_glBlendColor, __VA_ARGS__)
typedef void (*PFNGLBLENDEQUATIONPROC)(GLenum mode);
GLAPI PFNGLBLENDEQUATIONPROC biz_glBlendEquation;
#define glBlendEquation(...) WRAP_PFN(biz_glBlendEquation, __VA_ARGS__)

#define GL_VERSION_1_5 1
typedef void (*PFNGLGENQUERIESPROC)(GLsizei n, GLuint *ids);
GLAPI PFNGLGENQUERIESPROC biz_glGenQueries;
#define glGenQueries(...) WRAP_PFN(biz_glGenQueries, __VA_ARGS__)
typedef void (*PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint *ids);
GLAPI PFNGLDELETEQUERIESPROC biz_glDeleteQueries;
#define glDeleteQueries(...) WRAP_PFN(biz_glDeleteQueries, __VA_ARGS__)
typedef GLboolean (*PFNGLISQUERYPROC)(GLuint id);
GLAPI PFNGLISQUERYPROC biz_glIsQuery;
#define glIsQuery(...) WRAP_PFN(biz_glIsQuery, __VA_ARGS__)
typedef void (*PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
GLAPI PFNGLBEGINQUERYPROC biz_glBeginQuery;
#define glBeginQuery(...) WRAP_PFN(biz_glBeginQuery, __VA_ARGS__)
typedef void (*PFNGLENDQUERYPROC)(GLenum target);
GLAPI PFNGLENDQUERYPROC biz_glEndQuery;
#define glEndQuery(...) WRAP_PFN(biz_glEndQuery, __VA_ARGS__)
typedef void (*PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint *params);
GLAPI PFNGLGETQUERYIVPROC biz_glGetQueryiv;
#define glGetQueryiv(...) WRAP_PFN(biz_glGetQueryiv, __VA_ARGS__)
typedef void (*PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint *params);
GLAPI PFNGLGETQUERYOBJECTIVPROC biz_glGetQueryObjectiv;
#define glGetQueryObjectiv(...) WRAP_PFN(biz_glGetQueryObjectiv, __VA_ARGS__)
typedef void (*PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint *params);
GLAPI PFNGLGETQUERYOBJECTUIVPROC biz_glGetQueryObjectuiv;
#define glGetQueryObjectuiv(...) WRAP_PFN(biz_glGetQueryObjectuiv, __VA_ARGS__)
typedef void (*PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
GLAPI PFNGLBINDBUFFERPROC biz_glBindBuffer;
#define glBindBuffer(...) WRAP_PFN(biz_glBindBuffer, __VA_ARGS__)
typedef void (*PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint *buffers);
GLAPI PFNGLDELETEBUFFERSPROC biz_glDeleteBuffers;
#define glDeleteBuffers(...) WRAP_PFN(biz_glDeleteBuffers, __VA_ARGS__)
typedef void (*PFNGLGENBUFFERSPROC)(GLsizei n, GLuint *buffers);
GLAPI PFNGLGENBUFFERSPROC biz_glGenBuffers;
#define glGenBuffers(...) WRAP_PFN(biz_glGenBuffers, __VA_ARGS__)
typedef GLboolean (*PFNGLISBUFFERPROC)(GLuint buffer);
GLAPI PFNGLISBUFFERPROC biz_glIsBuffer;
#define glIsBuffer(...) WRAP_PFN(biz_glIsBuffer, __VA_ARGS__)
typedef void (*PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
GLAPI PFNGLBUFFERDATAPROC biz_glBufferData;
#define glBufferData(...) WRAP_PFN(biz_glBufferData, __VA_ARGS__)
typedef void (*PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
GLAPI PFNGLBUFFERSUBDATAPROC biz_glBufferSubData;
#define glBufferSubData(...) WRAP_PFN(biz_glBufferSubData, __VA_ARGS__)
typedef void (*PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
GLAPI PFNGLGETBUFFERSUBDATAPROC biz_glGetBufferSubData;
#define glGetBufferSubData(...) WRAP_PFN(biz_glGetBufferSubData, __VA_ARGS__)
typedef void * (*PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
GLAPI PFNGLMAPBUFFERPROC biz_glMapBuffer;
#define glMapBuffer(...) WRAP_PFN(biz_glMapBuffer, __VA_ARGS__)
typedef GLboolean (*PFNGLUNMAPBUFFERPROC)(GLenum target);
GLAPI PFNGLUNMAPBUFFERPROC biz_glUnmapBuffer;
#define glUnmapBuffer(...) WRAP_PFN(biz_glUnmapBuffer, __VA_ARGS__)
typedef void (*PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
GLAPI PFNGLGETBUFFERPARAMETERIVPROC biz_glGetBufferParameteriv;
#define glGetBufferParameteriv(...) WRAP_PFN(biz_glGetBufferParameteriv, __VA_ARGS__)
typedef void (*PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void **params);
GLAPI PFNGLGETBUFFERPOINTERVPROC biz_glGetBufferPointerv;
#define glGetBufferPointerv(...) WRAP_PFN(biz_glGetBufferPointerv, __VA_ARGS__)

#define GL_VERSION_2_0 1
typedef void (*PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
GLAPI PFNGLBLENDEQUATIONSEPARATEPROC biz_glBlendEquationSeparate;
#define glBlendEquationSeparate(...) WRAP_PFN(biz_glBlendEquationSeparate, __VA_ARGS__)
typedef void (*PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum *bufs);
GLAPI PFNGLDRAWBUFFERSPROC biz_glDrawBuffers;
#define glDrawBuffers(...) WRAP_PFN(biz_glDrawBuffers, __VA_ARGS__)
typedef void (*PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
GLAPI PFNGLSTENCILOPSEPARATEPROC biz_glStencilOpSeparate;
#define glStencilOpSeparate(...) WRAP_PFN(biz_glStencilOpSeparate, __VA_ARGS__)
typedef void (*PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
GLAPI PFNGLSTENCILFUNCSEPARATEPROC biz_glStencilFuncSeparate;
#define glStencilFuncSeparate(...) WRAP_PFN(biz_glStencilFuncSeparate, __VA_ARGS__)
typedef void (*PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
GLAPI PFNGLSTENCILMASKSEPARATEPROC biz_glStencilMaskSeparate;
#define glStencilMaskSeparate(...) WRAP_PFN(biz_glStencilMaskSeparate, __VA_ARGS__)
typedef void (*PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
GLAPI PFNGLATTACHSHADERPROC biz_glAttachShader;
#define glAttachShader(...) WRAP_PFN(biz_glAttachShader, __VA_ARGS__)
typedef void (*PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar *name);
GLAPI PFNGLBINDATTRIBLOCATIONPROC biz_glBindAttribLocation;
#define glBindAttribLocation(...) WRAP_PFN(biz_glBindAttribLocation, __VA_ARGS__)
typedef void (*PFNGLCOMPILESHADERPROC)(GLuint shader);
GLAPI PFNGLCOMPILESHADERPROC biz_glCompileShader;
#define glCompileShader(...) WRAP_PFN(biz_glCompileShader, __VA_ARGS__)
typedef GLuint (*PFNGLCREATEPROGRAMPROC)(void);
GLAPI PFNGLCREATEPROGRAMPROC biz_glCreateProgram;
#define glCreateProgram(...) WRAP_PFN(biz_glCreateProgram, __VA_ARGS__)
typedef GLuint (*PFNGLCREATESHADERPROC)(GLenum type);
GLAPI PFNGLCREATESHADERPROC biz_glCreateShader;
#define glCreateShader(...) WRAP_PFN(biz_glCreateShader, __VA_ARGS__)
typedef void (*PFNGLDELETEPROGRAMPROC)(GLuint program);
GLAPI PFNGLDELETEPROGRAMPROC biz_glDeleteProgram;
#define glDeleteProgram(...) WRAP_PFN(biz_glDeleteProgram, __VA_ARGS__)
typedef void (*PFNGLDELETESHADERPROC)(GLuint shader);
GLAPI PFNGLDELETESHADERPROC biz_glDeleteShader;
#define glDeleteShader(...) WRAP_PFN(biz_glDeleteShader, __VA_ARGS__)
typedef void (*PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
GLAPI PFNGLDETACHSHADERPROC biz_glDetachShader;
#define glDetachShader(...) WRAP_PFN(biz_glDetachShader, __VA_ARGS__)
typedef void (*PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
GLAPI PFNGLDISABLEVERTEXATTRIBARRAYPROC biz_glDisableVertexAttribArray;
#define glDisableVertexAttribArray(...) WRAP_PFN(biz_glDisableVertexAttribArray, __VA_ARGS__)
typedef void (*PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
GLAPI PFNGLENABLEVERTEXATTRIBARRAYPROC biz_glEnableVertexAttribArray;
#define glEnableVertexAttribArray(...) WRAP_PFN(biz_glEnableVertexAttribArray, __VA_ARGS__)
typedef void (*PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GLAPI PFNGLGETACTIVEATTRIBPROC biz_glGetActiveAttrib;
#define glGetActiveAttrib(...) WRAP_PFN(biz_glGetActiveAttrib, __VA_ARGS__)
typedef void (*PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GLAPI PFNGLGETACTIVEUNIFORMPROC biz_glGetActiveUniform;
#define glGetActiveUniform(...) WRAP_PFN(biz_glGetActiveUniform, __VA_ARGS__)
typedef void (*PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
GLAPI PFNGLGETATTACHEDSHADERSPROC biz_glGetAttachedShaders;
#define glGetAttachedShaders(...) WRAP_PFN(biz_glGetAttachedShaders, __VA_ARGS__)
typedef GLint (*PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar *name);
GLAPI PFNGLGETATTRIBLOCATIONPROC biz_glGetAttribLocation;
#define glGetAttribLocation(...) WRAP_PFN(biz_glGetAttribLocation, __VA_ARGS__)
typedef void (*PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint *params);
GLAPI PFNGLGETPROGRAMIVPROC biz_glGetProgramiv;
#define glGetProgramiv(...) WRAP_PFN(biz_glGetProgramiv, __VA_ARGS__)
typedef void (*PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI PFNGLGETPROGRAMINFOLOGPROC biz_glGetProgramInfoLog;
#define glGetProgramInfoLog(...) WRAP_PFN(biz_glGetProgramInfoLog, __VA_ARGS__)
typedef void (*PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint *params);
GLAPI PFNGLGETSHADERIVPROC biz_glGetShaderiv;
#define glGetShaderiv(...) WRAP_PFN(biz_glGetShaderiv, __VA_ARGS__)
typedef void (*PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI PFNGLGETSHADERINFOLOGPROC biz_glGetShaderInfoLog;
#define glGetShaderInfoLog(...) WRAP_PFN(biz_glGetShaderInfoLog, __VA_ARGS__)
typedef void (*PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
GLAPI PFNGLGETSHADERSOURCEPROC biz_glGetShaderSource;
#define glGetShaderSource(...) WRAP_PFN(biz_glGetShaderSource, __VA_ARGS__)
typedef GLint (*PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar *name);
GLAPI PFNGLGETUNIFORMLOCATIONPROC biz_glGetUniformLocation;
#define glGetUniformLocation(...) WRAP_PFN(biz_glGetUniformLocation, __VA_ARGS__)
typedef void (*PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat *params);
GLAPI PFNGLGETUNIFORMFVPROC biz_glGetUniformfv;
#define glGetUniformfv(...) WRAP_PFN(biz_glGetUniformfv, __VA_ARGS__)
typedef void (*PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint *params);
GLAPI PFNGLGETUNIFORMIVPROC biz_glGetUniformiv;
#define glGetUniformiv(...) WRAP_PFN(biz_glGetUniformiv, __VA_ARGS__)
typedef void (*PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble *params);
GLAPI PFNGLGETVERTEXATTRIBDVPROC biz_glGetVertexAttribdv;
#define glGetVertexAttribdv(...) WRAP_PFN(biz_glGetVertexAttribdv, __VA_ARGS__)
typedef void (*PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat *params);
GLAPI PFNGLGETVERTEXATTRIBFVPROC biz_glGetVertexAttribfv;
#define glGetVertexAttribfv(...) WRAP_PFN(biz_glGetVertexAttribfv, __VA_ARGS__)
typedef void (*PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint *params);
GLAPI PFNGLGETVERTEXATTRIBIVPROC biz_glGetVertexAttribiv;
#define glGetVertexAttribiv(...) WRAP_PFN(biz_glGetVertexAttribiv, __VA_ARGS__)
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void **pointer);
GLAPI PFNGLGETVERTEXATTRIBPOINTERVPROC biz_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv(...) WRAP_PFN(biz_glGetVertexAttribPointerv, __VA_ARGS__)
typedef GLboolean (*PFNGLISPROGRAMPROC)(GLuint program);
GLAPI PFNGLISPROGRAMPROC biz_glIsProgram;
#define glIsProgram(...) WRAP_PFN(biz_glIsProgram, __VA_ARGS__)
typedef GLboolean (*PFNGLISSHADERPROC)(GLuint shader);
GLAPI PFNGLISSHADERPROC biz_glIsShader;
#define glIsShader(...) WRAP_PFN(biz_glIsShader, __VA_ARGS__)
typedef void (*PFNGLLINKPROGRAMPROC)(GLuint program);
GLAPI PFNGLLINKPROGRAMPROC biz_glLinkProgram;
#define glLinkProgram(...) WRAP_PFN(biz_glLinkProgram, __VA_ARGS__)
typedef void (*PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
GLAPI PFNGLSHADERSOURCEPROC biz_glShaderSource;
#define glShaderSource(...) WRAP_PFN(biz_glShaderSource, __VA_ARGS__)
typedef void (*PFNGLUSEPROGRAMPROC)(GLuint program);
GLAPI PFNGLUSEPROGRAMPROC biz_glUseProgram;
#define glUseProgram(...) WRAP_PFN(biz_glUseProgram, __VA_ARGS__)
typedef void (*PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
GLAPI PFNGLUNIFORM1FPROC biz_glUniform1f;
#define glUniform1f(...) WRAP_PFN(biz_glUniform1f, __VA_ARGS__)
typedef void (*PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
GLAPI PFNGLUNIFORM2FPROC biz_glUniform2f;
#define glUniform2f(...) WRAP_PFN(biz_glUniform2f, __VA_ARGS__)
typedef void (*PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI PFNGLUNIFORM3FPROC biz_glUniform3f;
#define glUniform3f(...) WRAP_PFN(biz_glUniform3f, __VA_ARGS__)
typedef void (*PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI PFNGLUNIFORM4FPROC biz_glUniform4f;
#define glUniform4f(...) WRAP_PFN(biz_glUniform4f, __VA_ARGS__)
typedef void (*PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
GLAPI PFNGLUNIFORM1IPROC biz_glUniform1i;
#define glUniform1i(...) WRAP_PFN(biz_glUniform1i, __VA_ARGS__)
typedef void (*PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
GLAPI PFNGLUNIFORM2IPROC biz_glUniform2i;
#define glUniform2i(...) WRAP_PFN(biz_glUniform2i, __VA_ARGS__)
typedef void (*PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
GLAPI PFNGLUNIFORM3IPROC biz_glUniform3i;
#define glUniform3i(...) WRAP_PFN(biz_glUniform3i, __VA_ARGS__)
typedef void (*PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI PFNGLUNIFORM4IPROC biz_glUniform4i;
#define glUniform4i(...) WRAP_PFN(biz_glUniform4i, __VA_ARGS__)
typedef void (*PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLUNIFORM1FVPROC biz_glUniform1fv;
#define glUniform1fv(...) WRAP_PFN(biz_glUniform1fv, __VA_ARGS__)
typedef void (*PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLUNIFORM2FVPROC biz_glUniform2fv;
#define glUniform2fv(...) WRAP_PFN(biz_glUniform2fv, __VA_ARGS__)
typedef void (*PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLUNIFORM3FVPROC biz_glUniform3fv;
#define glUniform3fv(...) WRAP_PFN(biz_glUniform3fv, __VA_ARGS__)
typedef void (*PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLUNIFORM4FVPROC biz_glUniform4fv;
#define glUniform4fv(...) WRAP_PFN(biz_glUniform4fv, __VA_ARGS__)
typedef void (*PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLUNIFORM1IVPROC biz_glUniform1iv;
#define glUniform1iv(...) WRAP_PFN(biz_glUniform1iv, __VA_ARGS__)
typedef void (*PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLUNIFORM2IVPROC biz_glUniform2iv;
#define glUniform2iv(...) WRAP_PFN(biz_glUniform2iv, __VA_ARGS__)
typedef void (*PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLUNIFORM3IVPROC biz_glUniform3iv;
#define glUniform3iv(...) WRAP_PFN(biz_glUniform3iv, __VA_ARGS__)
typedef void (*PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLUNIFORM4IVPROC biz_glUniform4iv;
#define glUniform4iv(...) WRAP_PFN(biz_glUniform4iv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX2FVPROC biz_glUniformMatrix2fv;
#define glUniformMatrix2fv(...) WRAP_PFN(biz_glUniformMatrix2fv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX3FVPROC biz_glUniformMatrix3fv;
#define glUniformMatrix3fv(...) WRAP_PFN(biz_glUniformMatrix3fv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX4FVPROC biz_glUniformMatrix4fv;
#define glUniformMatrix4fv(...) WRAP_PFN(biz_glUniformMatrix4fv, __VA_ARGS__)
typedef void (*PFNGLVALIDATEPROGRAMPROC)(GLuint program);
GLAPI PFNGLVALIDATEPROGRAMPROC biz_glValidateProgram;
#define glValidateProgram(...) WRAP_PFN(biz_glValidateProgram, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
GLAPI PFNGLVERTEXATTRIB1DPROC biz_glVertexAttrib1d;
#define glVertexAttrib1d(...) WRAP_PFN(biz_glVertexAttrib1d, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIB1DVPROC biz_glVertexAttrib1dv;
#define glVertexAttrib1dv(...) WRAP_PFN(biz_glVertexAttrib1dv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
GLAPI PFNGLVERTEXATTRIB1FPROC biz_glVertexAttrib1f;
#define glVertexAttrib1f(...) WRAP_PFN(biz_glVertexAttrib1f, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVERTEXATTRIB1FVPROC biz_glVertexAttrib1fv;
#define glVertexAttrib1fv(...) WRAP_PFN(biz_glVertexAttrib1fv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
GLAPI PFNGLVERTEXATTRIB1SPROC biz_glVertexAttrib1s;
#define glVertexAttrib1s(...) WRAP_PFN(biz_glVertexAttrib1s, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB1SVPROC biz_glVertexAttrib1sv;
#define glVertexAttrib1sv(...) WRAP_PFN(biz_glVertexAttrib1sv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXATTRIB2DPROC biz_glVertexAttrib2d;
#define glVertexAttrib2d(...) WRAP_PFN(biz_glVertexAttrib2d, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIB2DVPROC biz_glVertexAttrib2dv;
#define glVertexAttrib2dv(...) WRAP_PFN(biz_glVertexAttrib2dv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
GLAPI PFNGLVERTEXATTRIB2FPROC biz_glVertexAttrib2f;
#define glVertexAttrib2f(...) WRAP_PFN(biz_glVertexAttrib2f, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVERTEXATTRIB2FVPROC biz_glVertexAttrib2fv;
#define glVertexAttrib2fv(...) WRAP_PFN(biz_glVertexAttrib2fv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
GLAPI PFNGLVERTEXATTRIB2SPROC biz_glVertexAttrib2s;
#define glVertexAttrib2s(...) WRAP_PFN(biz_glVertexAttrib2s, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB2SVPROC biz_glVertexAttrib2sv;
#define glVertexAttrib2sv(...) WRAP_PFN(biz_glVertexAttrib2sv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXATTRIB3DPROC biz_glVertexAttrib3d;
#define glVertexAttrib3d(...) WRAP_PFN(biz_glVertexAttrib3d, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIB3DVPROC biz_glVertexAttrib3dv;
#define glVertexAttrib3dv(...) WRAP_PFN(biz_glVertexAttrib3dv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLVERTEXATTRIB3FPROC biz_glVertexAttrib3f;
#define glVertexAttrib3f(...) WRAP_PFN(biz_glVertexAttrib3f, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVERTEXATTRIB3FVPROC biz_glVertexAttrib3fv;
#define glVertexAttrib3fv(...) WRAP_PFN(biz_glVertexAttrib3fv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
GLAPI PFNGLVERTEXATTRIB3SPROC biz_glVertexAttrib3s;
#define glVertexAttrib3s(...) WRAP_PFN(biz_glVertexAttrib3s, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB3SVPROC biz_glVertexAttrib3sv;
#define glVertexAttrib3sv(...) WRAP_PFN(biz_glVertexAttrib3sv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte *v);
GLAPI PFNGLVERTEXATTRIB4NBVPROC biz_glVertexAttrib4Nbv;
#define glVertexAttrib4Nbv(...) WRAP_PFN(biz_glVertexAttrib4Nbv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIB4NIVPROC biz_glVertexAttrib4Niv;
#define glVertexAttrib4Niv(...) WRAP_PFN(biz_glVertexAttrib4Niv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB4NSVPROC biz_glVertexAttrib4Nsv;
#define glVertexAttrib4Nsv(...) WRAP_PFN(biz_glVertexAttrib4Nsv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
GLAPI PFNGLVERTEXATTRIB4NUBPROC biz_glVertexAttrib4Nub;
#define glVertexAttrib4Nub(...) WRAP_PFN(biz_glVertexAttrib4Nub, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte *v);
GLAPI PFNGLVERTEXATTRIB4NUBVPROC biz_glVertexAttrib4Nubv;
#define glVertexAttrib4Nubv(...) WRAP_PFN(biz_glVertexAttrib4Nubv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIB4NUIVPROC biz_glVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv(...) WRAP_PFN(biz_glVertexAttrib4Nuiv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort *v);
GLAPI PFNGLVERTEXATTRIB4NUSVPROC biz_glVertexAttrib4Nusv;
#define glVertexAttrib4Nusv(...) WRAP_PFN(biz_glVertexAttrib4Nusv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte *v);
GLAPI PFNGLVERTEXATTRIB4BVPROC biz_glVertexAttrib4bv;
#define glVertexAttrib4bv(...) WRAP_PFN(biz_glVertexAttrib4bv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXATTRIB4DPROC biz_glVertexAttrib4d;
#define glVertexAttrib4d(...) WRAP_PFN(biz_glVertexAttrib4d, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIB4DVPROC biz_glVertexAttrib4dv;
#define glVertexAttrib4dv(...) WRAP_PFN(biz_glVertexAttrib4dv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLVERTEXATTRIB4FPROC biz_glVertexAttrib4f;
#define glVertexAttrib4f(...) WRAP_PFN(biz_glVertexAttrib4f, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVERTEXATTRIB4FVPROC biz_glVertexAttrib4fv;
#define glVertexAttrib4fv(...) WRAP_PFN(biz_glVertexAttrib4fv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIB4IVPROC biz_glVertexAttrib4iv;
#define glVertexAttrib4iv(...) WRAP_PFN(biz_glVertexAttrib4iv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI PFNGLVERTEXATTRIB4SPROC biz_glVertexAttrib4s;
#define glVertexAttrib4s(...) WRAP_PFN(biz_glVertexAttrib4s, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB4SVPROC biz_glVertexAttrib4sv;
#define glVertexAttrib4sv(...) WRAP_PFN(biz_glVertexAttrib4sv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte *v);
GLAPI PFNGLVERTEXATTRIB4UBVPROC biz_glVertexAttrib4ubv;
#define glVertexAttrib4ubv(...) WRAP_PFN(biz_glVertexAttrib4ubv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIB4UIVPROC biz_glVertexAttrib4uiv;
#define glVertexAttrib4uiv(...) WRAP_PFN(biz_glVertexAttrib4uiv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort *v);
GLAPI PFNGLVERTEXATTRIB4USVPROC biz_glVertexAttrib4usv;
#define glVertexAttrib4usv(...) WRAP_PFN(biz_glVertexAttrib4usv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
GLAPI PFNGLVERTEXATTRIBPOINTERPROC biz_glVertexAttribPointer;
#define glVertexAttribPointer(...) WRAP_PFN(biz_glVertexAttribPointer, __VA_ARGS__)

#define GL_VERSION_2_1 1
typedef void (*PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX2X3FVPROC biz_glUniformMatrix2x3fv;
#define glUniformMatrix2x3fv(...) WRAP_PFN(biz_glUniformMatrix2x3fv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX3X2FVPROC biz_glUniformMatrix3x2fv;
#define glUniformMatrix3x2fv(...) WRAP_PFN(biz_glUniformMatrix3x2fv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX2X4FVPROC biz_glUniformMatrix2x4fv;
#define glUniformMatrix2x4fv(...) WRAP_PFN(biz_glUniformMatrix2x4fv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX4X2FVPROC biz_glUniformMatrix4x2fv;
#define glUniformMatrix4x2fv(...) WRAP_PFN(biz_glUniformMatrix4x2fv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX3X4FVPROC biz_glUniformMatrix3x4fv;
#define glUniformMatrix3x4fv(...) WRAP_PFN(biz_glUniformMatrix3x4fv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX4X3FVPROC biz_glUniformMatrix4x3fv;
#define glUniformMatrix4x3fv(...) WRAP_PFN(biz_glUniformMatrix4x3fv, __VA_ARGS__)

#define GL_VERSION_3_0 1
typedef void (*PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLAPI PFNGLCOLORMASKIPROC biz_glColorMaski;
#define glColorMaski(...) WRAP_PFN(biz_glColorMaski, __VA_ARGS__)
typedef void (*PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean *data);
GLAPI PFNGLGETBOOLEANI_VPROC biz_glGetBooleani_v;
#define glGetBooleani_v(...) WRAP_PFN(biz_glGetBooleani_v, __VA_ARGS__)
typedef void (*PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint *data);
GLAPI PFNGLGETINTEGERI_VPROC biz_glGetIntegeri_v;
#define glGetIntegeri_v(...) WRAP_PFN(biz_glGetIntegeri_v, __VA_ARGS__)
typedef void (*PFNGLENABLEIPROC)(GLenum target, GLuint index);
GLAPI PFNGLENABLEIPROC biz_glEnablei;
#define glEnablei(...) WRAP_PFN(biz_glEnablei, __VA_ARGS__)
typedef void (*PFNGLDISABLEIPROC)(GLenum target, GLuint index);
GLAPI PFNGLDISABLEIPROC biz_glDisablei;
#define glDisablei(...) WRAP_PFN(biz_glDisablei, __VA_ARGS__)
typedef GLboolean (*PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
GLAPI PFNGLISENABLEDIPROC biz_glIsEnabledi;
#define glIsEnabledi(...) WRAP_PFN(biz_glIsEnabledi, __VA_ARGS__)
typedef void (*PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
GLAPI PFNGLBEGINTRANSFORMFEEDBACKPROC biz_glBeginTransformFeedback;
#define glBeginTransformFeedback(...) WRAP_PFN(biz_glBeginTransformFeedback, __VA_ARGS__)
typedef void (*PFNGLENDTRANSFORMFEEDBACKPROC)(void);
GLAPI PFNGLENDTRANSFORMFEEDBACKPROC biz_glEndTransformFeedback;
#define glEndTransformFeedback(...) WRAP_PFN(biz_glEndTransformFeedback, __VA_ARGS__)
typedef void (*PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLBINDBUFFERRANGEPROC biz_glBindBufferRange;
#define glBindBufferRange(...) WRAP_PFN(biz_glBindBufferRange, __VA_ARGS__)
typedef void (*PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
GLAPI PFNGLBINDBUFFERBASEPROC biz_glBindBufferBase;
#define glBindBufferBase(...) WRAP_PFN(biz_glBindBufferBase, __VA_ARGS__)
typedef void (*PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSPROC biz_glTransformFeedbackVaryings;
#define glTransformFeedbackVaryings(...) WRAP_PFN(biz_glTransformFeedbackVaryings, __VA_ARGS__)
typedef void (*PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGPROC biz_glGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying(...) WRAP_PFN(biz_glGetTransformFeedbackVarying, __VA_ARGS__)
typedef void (*PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
GLAPI PFNGLCLAMPCOLORPROC biz_glClampColor;
#define glClampColor(...) WRAP_PFN(biz_glClampColor, __VA_ARGS__)
typedef void (*PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
GLAPI PFNGLBEGINCONDITIONALRENDERPROC biz_glBeginConditionalRender;
#define glBeginConditionalRender(...) WRAP_PFN(biz_glBeginConditionalRender, __VA_ARGS__)
typedef void (*PFNGLENDCONDITIONALRENDERPROC)(void);
GLAPI PFNGLENDCONDITIONALRENDERPROC biz_glEndConditionalRender;
#define glEndConditionalRender(...) WRAP_PFN(biz_glEndConditionalRender, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
GLAPI PFNGLVERTEXATTRIBIPOINTERPROC biz_glVertexAttribIPointer;
#define glVertexAttribIPointer(...) WRAP_PFN(biz_glVertexAttribIPointer, __VA_ARGS__)
typedef void (*PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint *params);
GLAPI PFNGLGETVERTEXATTRIBIIVPROC biz_glGetVertexAttribIiv;
#define glGetVertexAttribIiv(...) WRAP_PFN(biz_glGetVertexAttribIiv, __VA_ARGS__)
typedef void (*PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint *params);
GLAPI PFNGLGETVERTEXATTRIBIUIVPROC biz_glGetVertexAttribIuiv;
#define glGetVertexAttribIuiv(...) WRAP_PFN(biz_glGetVertexAttribIuiv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
GLAPI PFNGLVERTEXATTRIBI1IPROC biz_glVertexAttribI1i;
#define glVertexAttribI1i(...) WRAP_PFN(biz_glVertexAttribI1i, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
GLAPI PFNGLVERTEXATTRIBI2IPROC biz_glVertexAttribI2i;
#define glVertexAttribI2i(...) WRAP_PFN(biz_glVertexAttribI2i, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
GLAPI PFNGLVERTEXATTRIBI3IPROC biz_glVertexAttribI3i;
#define glVertexAttribI3i(...) WRAP_PFN(biz_glVertexAttribI3i, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
GLAPI PFNGLVERTEXATTRIBI4IPROC biz_glVertexAttribI4i;
#define glVertexAttribI4i(...) WRAP_PFN(biz_glVertexAttribI4i, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
GLAPI PFNGLVERTEXATTRIBI1UIPROC biz_glVertexAttribI1ui;
#define glVertexAttribI1ui(...) WRAP_PFN(biz_glVertexAttribI1ui, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
GLAPI PFNGLVERTEXATTRIBI2UIPROC biz_glVertexAttribI2ui;
#define glVertexAttribI2ui(...) WRAP_PFN(biz_glVertexAttribI2ui, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
GLAPI PFNGLVERTEXATTRIBI3UIPROC biz_glVertexAttribI3ui;
#define glVertexAttribI3ui(...) WRAP_PFN(biz_glVertexAttribI3ui, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI PFNGLVERTEXATTRIBI4UIPROC biz_glVertexAttribI4ui;
#define glVertexAttribI4ui(...) WRAP_PFN(biz_glVertexAttribI4ui, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIBI1IVPROC biz_glVertexAttribI1iv;
#define glVertexAttribI1iv(...) WRAP_PFN(biz_glVertexAttribI1iv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIBI2IVPROC biz_glVertexAttribI2iv;
#define glVertexAttribI2iv(...) WRAP_PFN(biz_glVertexAttribI2iv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIBI3IVPROC biz_glVertexAttribI3iv;
#define glVertexAttribI3iv(...) WRAP_PFN(biz_glVertexAttribI3iv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIBI4IVPROC biz_glVertexAttribI4iv;
#define glVertexAttribI4iv(...) WRAP_PFN(biz_glVertexAttribI4iv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIBI1UIVPROC biz_glVertexAttribI1uiv;
#define glVertexAttribI1uiv(...) WRAP_PFN(biz_glVertexAttribI1uiv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIBI2UIVPROC biz_glVertexAttribI2uiv;
#define glVertexAttribI2uiv(...) WRAP_PFN(biz_glVertexAttribI2uiv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIBI3UIVPROC biz_glVertexAttribI3uiv;
#define glVertexAttribI3uiv(...) WRAP_PFN(biz_glVertexAttribI3uiv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIBI4UIVPROC biz_glVertexAttribI4uiv;
#define glVertexAttribI4uiv(...) WRAP_PFN(biz_glVertexAttribI4uiv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte *v);
GLAPI PFNGLVERTEXATTRIBI4BVPROC biz_glVertexAttribI4bv;
#define glVertexAttribI4bv(...) WRAP_PFN(biz_glVertexAttribI4bv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIBI4SVPROC biz_glVertexAttribI4sv;
#define glVertexAttribI4sv(...) WRAP_PFN(biz_glVertexAttribI4sv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte *v);
GLAPI PFNGLVERTEXATTRIBI4UBVPROC biz_glVertexAttribI4ubv;
#define glVertexAttribI4ubv(...) WRAP_PFN(biz_glVertexAttribI4ubv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort *v);
GLAPI PFNGLVERTEXATTRIBI4USVPROC biz_glVertexAttribI4usv;
#define glVertexAttribI4usv(...) WRAP_PFN(biz_glVertexAttribI4usv, __VA_ARGS__)
typedef void (*PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint *params);
GLAPI PFNGLGETUNIFORMUIVPROC biz_glGetUniformuiv;
#define glGetUniformuiv(...) WRAP_PFN(biz_glGetUniformuiv, __VA_ARGS__)
typedef void (*PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar *name);
GLAPI PFNGLBINDFRAGDATALOCATIONPROC biz_glBindFragDataLocation;
#define glBindFragDataLocation(...) WRAP_PFN(biz_glBindFragDataLocation, __VA_ARGS__)
typedef GLint (*PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar *name);
GLAPI PFNGLGETFRAGDATALOCATIONPROC biz_glGetFragDataLocation;
#define glGetFragDataLocation(...) WRAP_PFN(biz_glGetFragDataLocation, __VA_ARGS__)
typedef void (*PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
GLAPI PFNGLUNIFORM1UIPROC biz_glUniform1ui;
#define glUniform1ui(...) WRAP_PFN(biz_glUniform1ui, __VA_ARGS__)
typedef void (*PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
GLAPI PFNGLUNIFORM2UIPROC biz_glUniform2ui;
#define glUniform2ui(...) WRAP_PFN(biz_glUniform2ui, __VA_ARGS__)
typedef void (*PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI PFNGLUNIFORM3UIPROC biz_glUniform3ui;
#define glUniform3ui(...) WRAP_PFN(biz_glUniform3ui, __VA_ARGS__)
typedef void (*PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI PFNGLUNIFORM4UIPROC biz_glUniform4ui;
#define glUniform4ui(...) WRAP_PFN(biz_glUniform4ui, __VA_ARGS__)
typedef void (*PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLUNIFORM1UIVPROC biz_glUniform1uiv;
#define glUniform1uiv(...) WRAP_PFN(biz_glUniform1uiv, __VA_ARGS__)
typedef void (*PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLUNIFORM2UIVPROC biz_glUniform2uiv;
#define glUniform2uiv(...) WRAP_PFN(biz_glUniform2uiv, __VA_ARGS__)
typedef void (*PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLUNIFORM3UIVPROC biz_glUniform3uiv;
#define glUniform3uiv(...) WRAP_PFN(biz_glUniform3uiv, __VA_ARGS__)
typedef void (*PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLUNIFORM4UIVPROC biz_glUniform4uiv;
#define glUniform4uiv(...) WRAP_PFN(biz_glUniform4uiv, __VA_ARGS__)
typedef void (*PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint *params);
GLAPI PFNGLTEXPARAMETERIIVPROC biz_glTexParameterIiv;
#define glTexParameterIiv(...) WRAP_PFN(biz_glTexParameterIiv, __VA_ARGS__)
typedef void (*PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint *params);
GLAPI PFNGLTEXPARAMETERIUIVPROC biz_glTexParameterIuiv;
#define glTexParameterIuiv(...) WRAP_PFN(biz_glTexParameterIuiv, __VA_ARGS__)
typedef void (*PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint *params);
GLAPI PFNGLGETTEXPARAMETERIIVPROC biz_glGetTexParameterIiv;
#define glGetTexParameterIiv(...) WRAP_PFN(biz_glGetTexParameterIiv, __VA_ARGS__)
typedef void (*PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint *params);
GLAPI PFNGLGETTEXPARAMETERIUIVPROC biz_glGetTexParameterIuiv;
#define glGetTexParameterIuiv(...) WRAP_PFN(biz_glGetTexParameterIuiv, __VA_ARGS__)
typedef void (*PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint *value);
GLAPI PFNGLCLEARBUFFERIVPROC biz_glClearBufferiv;
#define glClearBufferiv(...) WRAP_PFN(biz_glClearBufferiv, __VA_ARGS__)
typedef void (*PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint *value);
GLAPI PFNGLCLEARBUFFERUIVPROC biz_glClearBufferuiv;
#define glClearBufferuiv(...) WRAP_PFN(biz_glClearBufferuiv, __VA_ARGS__)
typedef void (*PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
GLAPI PFNGLCLEARBUFFERFVPROC biz_glClearBufferfv;
#define glClearBufferfv(...) WRAP_PFN(biz_glClearBufferfv, __VA_ARGS__)
typedef void (*PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLAPI PFNGLCLEARBUFFERFIPROC biz_glClearBufferfi;
#define glClearBufferfi(...) WRAP_PFN(biz_glClearBufferfi, __VA_ARGS__)
typedef const GLubyte * (*PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
GLAPI PFNGLGETSTRINGIPROC biz_glGetStringi;
#define glGetStringi(...) WRAP_PFN(biz_glGetStringi, __VA_ARGS__)
typedef GLboolean (*PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
GLAPI PFNGLISRENDERBUFFERPROC biz_glIsRenderbuffer;
#define glIsRenderbuffer(...) WRAP_PFN(biz_glIsRenderbuffer, __VA_ARGS__)
typedef void (*PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
GLAPI PFNGLBINDRENDERBUFFERPROC biz_glBindRenderbuffer;
#define glBindRenderbuffer(...) WRAP_PFN(biz_glBindRenderbuffer, __VA_ARGS__)
typedef void (*PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint *renderbuffers);
GLAPI PFNGLDELETERENDERBUFFERSPROC biz_glDeleteRenderbuffers;
#define glDeleteRenderbuffers(...) WRAP_PFN(biz_glDeleteRenderbuffers, __VA_ARGS__)
typedef void (*PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);
GLAPI PFNGLGENRENDERBUFFERSPROC biz_glGenRenderbuffers;
#define glGenRenderbuffers(...) WRAP_PFN(biz_glGenRenderbuffers, __VA_ARGS__)
typedef void (*PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLRENDERBUFFERSTORAGEPROC biz_glRenderbufferStorage;
#define glRenderbufferStorage(...) WRAP_PFN(biz_glRenderbufferStorage, __VA_ARGS__)
typedef void (*PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
GLAPI PFNGLGETRENDERBUFFERPARAMETERIVPROC biz_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv(...) WRAP_PFN(biz_glGetRenderbufferParameteriv, __VA_ARGS__)
typedef GLboolean (*PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
GLAPI PFNGLISFRAMEBUFFERPROC biz_glIsFramebuffer;
#define glIsFramebuffer(...) WRAP_PFN(biz_glIsFramebuffer, __VA_ARGS__)
typedef void (*PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
GLAPI PFNGLBINDFRAMEBUFFERPROC biz_glBindFramebuffer;
#define glBindFramebuffer(...) WRAP_PFN(biz_glBindFramebuffer, __VA_ARGS__)
typedef void (*PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint *framebuffers);
GLAPI PFNGLDELETEFRAMEBUFFERSPROC biz_glDeleteFramebuffers;
#define glDeleteFramebuffers(...) WRAP_PFN(biz_glDeleteFramebuffers, __VA_ARGS__)
typedef void (*PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);
GLAPI PFNGLGENFRAMEBUFFERSPROC biz_glGenFramebuffers;
#define glGenFramebuffers(...) WRAP_PFN(biz_glGenFramebuffers, __VA_ARGS__)
typedef GLenum (*PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
GLAPI PFNGLCHECKFRAMEBUFFERSTATUSPROC biz_glCheckFramebufferStatus;
#define glCheckFramebufferStatus(...) WRAP_PFN(biz_glCheckFramebufferStatus, __VA_ARGS__)
typedef void (*PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTURE1DPROC biz_glFramebufferTexture1D;
#define glFramebufferTexture1D(...) WRAP_PFN(biz_glFramebufferTexture1D, __VA_ARGS__)
typedef void (*PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTURE2DPROC biz_glFramebufferTexture2D;
#define glFramebufferTexture2D(...) WRAP_PFN(biz_glFramebufferTexture2D, __VA_ARGS__)
typedef void (*PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
GLAPI PFNGLFRAMEBUFFERTEXTURE3DPROC biz_glFramebufferTexture3D;
#define glFramebufferTexture3D(...) WRAP_PFN(biz_glFramebufferTexture3D, __VA_ARGS__)
typedef void (*PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI PFNGLFRAMEBUFFERRENDERBUFFERPROC biz_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer(...) WRAP_PFN(biz_glFramebufferRenderbuffer, __VA_ARGS__)
typedef void (*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC biz_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv(...) WRAP_PFN(biz_glGetFramebufferAttachmentParameteriv, __VA_ARGS__)
typedef void (*PFNGLGENERATEMIPMAPPROC)(GLenum target);
GLAPI PFNGLGENERATEMIPMAPPROC biz_glGenerateMipmap;
#define glGenerateMipmap(...) WRAP_PFN(biz_glGenerateMipmap, __VA_ARGS__)
typedef void (*PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLAPI PFNGLBLITFRAMEBUFFERPROC biz_glBlitFramebuffer;
#define glBlitFramebuffer(...) WRAP_PFN(biz_glBlitFramebuffer, __VA_ARGS__)
typedef void (*PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC biz_glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample(...) WRAP_PFN(biz_glRenderbufferStorageMultisample, __VA_ARGS__)
typedef void (*PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI PFNGLFRAMEBUFFERTEXTURELAYERPROC biz_glFramebufferTextureLayer;
#define glFramebufferTextureLayer(...) WRAP_PFN(biz_glFramebufferTextureLayer, __VA_ARGS__)
typedef void * (*PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI PFNGLMAPBUFFERRANGEPROC biz_glMapBufferRange;
#define glMapBufferRange(...) WRAP_PFN(biz_glMapBufferRange, __VA_ARGS__)
typedef void (*PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLFLUSHMAPPEDBUFFERRANGEPROC biz_glFlushMappedBufferRange;
#define glFlushMappedBufferRange(...) WRAP_PFN(biz_glFlushMappedBufferRange, __VA_ARGS__)
typedef void (*PFNGLBINDVERTEXARRAYPROC)(GLuint array);
GLAPI PFNGLBINDVERTEXARRAYPROC biz_glBindVertexArray;
#define glBindVertexArray(...) WRAP_PFN(biz_glBindVertexArray, __VA_ARGS__)
typedef void (*PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint *arrays);
GLAPI PFNGLDELETEVERTEXARRAYSPROC biz_glDeleteVertexArrays;
#define glDeleteVertexArrays(...) WRAP_PFN(biz_glDeleteVertexArrays, __VA_ARGS__)
typedef void (*PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);
GLAPI PFNGLGENVERTEXARRAYSPROC biz_glGenVertexArrays;
#define glGenVertexArrays(...) WRAP_PFN(biz_glGenVertexArrays, __VA_ARGS__)
typedef GLboolean (*PFNGLISVERTEXARRAYPROC)(GLuint array);
GLAPI PFNGLISVERTEXARRAYPROC biz_glIsVertexArray;
#define glIsVertexArray(...) WRAP_PFN(biz_glIsVertexArray, __VA_ARGS__)

#define GL_VERSION_3_1 1
typedef void (*PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
GLAPI PFNGLDRAWARRAYSINSTANCEDPROC biz_glDrawArraysInstanced;
#define glDrawArraysInstanced(...) WRAP_PFN(biz_glDrawArraysInstanced, __VA_ARGS__)
typedef void (*PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
GLAPI PFNGLDRAWELEMENTSINSTANCEDPROC biz_glDrawElementsInstanced;
#define glDrawElementsInstanced(...) WRAP_PFN(biz_glDrawElementsInstanced, __VA_ARGS__)
typedef void (*PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
GLAPI PFNGLTEXBUFFERPROC biz_glTexBuffer;
#define glTexBuffer(...) WRAP_PFN(biz_glTexBuffer, __VA_ARGS__)
typedef void (*PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
GLAPI PFNGLPRIMITIVERESTARTINDEXPROC biz_glPrimitiveRestartIndex;
#define glPrimitiveRestartIndex(...) WRAP_PFN(biz_glPrimitiveRestartIndex, __VA_ARGS__)
typedef void (*PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI PFNGLCOPYBUFFERSUBDATAPROC biz_glCopyBufferSubData;
#define glCopyBufferSubData(...) WRAP_PFN(biz_glCopyBufferSubData, __VA_ARGS__)
typedef void (*PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
GLAPI PFNGLGETUNIFORMINDICESPROC biz_glGetUniformIndices;
#define glGetUniformIndices(...) WRAP_PFN(biz_glGetUniformIndices, __VA_ARGS__)
typedef void (*PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
GLAPI PFNGLGETACTIVEUNIFORMSIVPROC biz_glGetActiveUniformsiv;
#define glGetActiveUniformsiv(...) WRAP_PFN(biz_glGetActiveUniformsiv, __VA_ARGS__)
typedef void (*PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
GLAPI PFNGLGETACTIVEUNIFORMNAMEPROC biz_glGetActiveUniformName;
#define glGetActiveUniformName(...) WRAP_PFN(biz_glGetActiveUniformName, __VA_ARGS__)
typedef GLuint (*PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar *uniformBlockName);
GLAPI PFNGLGETUNIFORMBLOCKINDEXPROC biz_glGetUniformBlockIndex;
#define glGetUniformBlockIndex(...) WRAP_PFN(biz_glGetUniformBlockIndex, __VA_ARGS__)
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
GLAPI PFNGLGETACTIVEUNIFORMBLOCKIVPROC biz_glGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv(...) WRAP_PFN(biz_glGetActiveUniformBlockiv, __VA_ARGS__)
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
GLAPI PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC biz_glGetActiveUniformBlockName;
#define glGetActiveUniformBlockName(...) WRAP_PFN(biz_glGetActiveUniformBlockName, __VA_ARGS__)
typedef void (*PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
GLAPI PFNGLUNIFORMBLOCKBINDINGPROC biz_glUniformBlockBinding;
#define glUniformBlockBinding(...) WRAP_PFN(biz_glUniformBlockBinding, __VA_ARGS__)

#define GL_VERSION_3_2 1
typedef void (*PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
GLAPI PFNGLDRAWELEMENTSBASEVERTEXPROC biz_glDrawElementsBaseVertex;
#define glDrawElementsBaseVertex(...) WRAP_PFN(biz_glDrawElementsBaseVertex, __VA_ARGS__)
typedef void (*PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
GLAPI PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC biz_glDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex(...) WRAP_PFN(biz_glDrawRangeElementsBaseVertex, __VA_ARGS__)
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC biz_glDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex(...) WRAP_PFN(biz_glDrawElementsInstancedBaseVertex, __VA_ARGS__)
typedef void (*PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
GLAPI PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC biz_glMultiDrawElementsBaseVertex;
#define glMultiDrawElementsBaseVertex(...) WRAP_PFN(biz_glMultiDrawElementsBaseVertex, __VA_ARGS__)
typedef void (*PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
GLAPI PFNGLPROVOKINGVERTEXPROC biz_glProvokingVertex;
#define glProvokingVertex(...) WRAP_PFN(biz_glProvokingVertex, __VA_ARGS__)
typedef GLsync (*PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
GLAPI PFNGLFENCESYNCPROC biz_glFenceSync;
#define glFenceSync(...) WRAP_PFN(biz_glFenceSync, __VA_ARGS__)
typedef GLboolean (*PFNGLISSYNCPROC)(GLsync sync);
GLAPI PFNGLISSYNCPROC biz_glIsSync;
#define glIsSync(...) WRAP_PFN(biz_glIsSync, __VA_ARGS__)
typedef void (*PFNGLDELETESYNCPROC)(GLsync sync);
GLAPI PFNGLDELETESYNCPROC biz_glDeleteSync;
#define glDeleteSync(...) WRAP_PFN(biz_glDeleteSync, __VA_ARGS__)
typedef GLenum (*PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI PFNGLCLIENTWAITSYNCPROC biz_glClientWaitSync;
#define glClientWaitSync(...) WRAP_PFN(biz_glClientWaitSync, __VA_ARGS__)
typedef void (*PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI PFNGLWAITSYNCPROC biz_glWaitSync;
#define glWaitSync(...) WRAP_PFN(biz_glWaitSync, __VA_ARGS__)
typedef void (*PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 *data);
GLAPI PFNGLGETINTEGER64VPROC biz_glGetInteger64v;
#define glGetInteger64v(...) WRAP_PFN(biz_glGetInteger64v, __VA_ARGS__)
typedef void (*PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values);
GLAPI PFNGLGETSYNCIVPROC biz_glGetSynciv;
#define glGetSynciv(...) WRAP_PFN(biz_glGetSynciv, __VA_ARGS__)
typedef void (*PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 *data);
GLAPI PFNGLGETINTEGER64I_VPROC biz_glGetInteger64i_v;
#define glGetInteger64i_v(...) WRAP_PFN(biz_glGetInteger64i_v, __VA_ARGS__)
typedef void (*PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 *params);
GLAPI PFNGLGETBUFFERPARAMETERI64VPROC biz_glGetBufferParameteri64v;
#define glGetBufferParameteri64v(...) WRAP_PFN(biz_glGetBufferParameteri64v, __VA_ARGS__)
typedef void (*PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTUREPROC biz_glFramebufferTexture;
#define glFramebufferTexture(...) WRAP_PFN(biz_glFramebufferTexture, __VA_ARGS__)
typedef void (*PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXIMAGE2DMULTISAMPLEPROC biz_glTexImage2DMultisample;
#define glTexImage2DMultisample(...) WRAP_PFN(biz_glTexImage2DMultisample, __VA_ARGS__)
typedef void (*PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXIMAGE3DMULTISAMPLEPROC biz_glTexImage3DMultisample;
#define glTexImage3DMultisample(...) WRAP_PFN(biz_glTexImage3DMultisample, __VA_ARGS__)
typedef void (*PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat *val);
GLAPI PFNGLGETMULTISAMPLEFVPROC biz_glGetMultisamplefv;
#define glGetMultisamplefv(...) WRAP_PFN(biz_glGetMultisamplefv, __VA_ARGS__)
typedef void (*PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
GLAPI PFNGLSAMPLEMASKIPROC biz_glSampleMaski;
#define glSampleMaski(...) WRAP_PFN(biz_glSampleMaski, __VA_ARGS__)

#define GL_VERSION_3_3 1
typedef void (*PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
GLAPI PFNGLBINDFRAGDATALOCATIONINDEXEDPROC biz_glBindFragDataLocationIndexed;
#define glBindFragDataLocationIndexed(...) WRAP_PFN(biz_glBindFragDataLocationIndexed, __VA_ARGS__)
typedef GLint (*PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar *name);
GLAPI PFNGLGETFRAGDATAINDEXPROC biz_glGetFragDataIndex;
#define glGetFragDataIndex(...) WRAP_PFN(biz_glGetFragDataIndex, __VA_ARGS__)
typedef void (*PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint *samplers);
GLAPI PFNGLGENSAMPLERSPROC biz_glGenSamplers;
#define glGenSamplers(...) WRAP_PFN(biz_glGenSamplers, __VA_ARGS__)
typedef void (*PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint *samplers);
GLAPI PFNGLDELETESAMPLERSPROC biz_glDeleteSamplers;
#define glDeleteSamplers(...) WRAP_PFN(biz_glDeleteSamplers, __VA_ARGS__)
typedef GLboolean (*PFNGLISSAMPLERPROC)(GLuint sampler);
GLAPI PFNGLISSAMPLERPROC biz_glIsSampler;
#define glIsSampler(...) WRAP_PFN(biz_glIsSampler, __VA_ARGS__)
typedef void (*PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
GLAPI PFNGLBINDSAMPLERPROC biz_glBindSampler;
#define glBindSampler(...) WRAP_PFN(biz_glBindSampler, __VA_ARGS__)
typedef void (*PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
GLAPI PFNGLSAMPLERPARAMETERIPROC biz_glSamplerParameteri;
#define glSamplerParameteri(...) WRAP_PFN(biz_glSamplerParameteri, __VA_ARGS__)
typedef void (*PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
GLAPI PFNGLSAMPLERPARAMETERIVPROC biz_glSamplerParameteriv;
#define glSamplerParameteriv(...) WRAP_PFN(biz_glSamplerParameteriv, __VA_ARGS__)
typedef void (*PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
GLAPI PFNGLSAMPLERPARAMETERFPROC biz_glSamplerParameterf;
#define glSamplerParameterf(...) WRAP_PFN(biz_glSamplerParameterf, __VA_ARGS__)
typedef void (*PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat *param);
GLAPI PFNGLSAMPLERPARAMETERFVPROC biz_glSamplerParameterfv;
#define glSamplerParameterfv(...) WRAP_PFN(biz_glSamplerParameterfv, __VA_ARGS__)
typedef void (*PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
GLAPI PFNGLSAMPLERPARAMETERIIVPROC biz_glSamplerParameterIiv;
#define glSamplerParameterIiv(...) WRAP_PFN(biz_glSamplerParameterIiv, __VA_ARGS__)
typedef void (*PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint *param);
GLAPI PFNGLSAMPLERPARAMETERIUIVPROC biz_glSamplerParameterIuiv;
#define glSamplerParameterIuiv(...) WRAP_PFN(biz_glSamplerParameterIuiv, __VA_ARGS__)
typedef void (*PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint *params);
GLAPI PFNGLGETSAMPLERPARAMETERIVPROC biz_glGetSamplerParameteriv;
#define glGetSamplerParameteriv(...) WRAP_PFN(biz_glGetSamplerParameteriv, __VA_ARGS__)
typedef void (*PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint *params);
GLAPI PFNGLGETSAMPLERPARAMETERIIVPROC biz_glGetSamplerParameterIiv;
#define glGetSamplerParameterIiv(...) WRAP_PFN(biz_glGetSamplerParameterIiv, __VA_ARGS__)
typedef void (*PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat *params);
GLAPI PFNGLGETSAMPLERPARAMETERFVPROC biz_glGetSamplerParameterfv;
#define glGetSamplerParameterfv(...) WRAP_PFN(biz_glGetSamplerParameterfv, __VA_ARGS__)
typedef void (*PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint *params);
GLAPI PFNGLGETSAMPLERPARAMETERIUIVPROC biz_glGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv(...) WRAP_PFN(biz_glGetSamplerParameterIuiv, __VA_ARGS__)
typedef void (*PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
GLAPI PFNGLQUERYCOUNTERPROC biz_glQueryCounter;
#define glQueryCounter(...) WRAP_PFN(biz_glQueryCounter, __VA_ARGS__)
typedef void (*PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 *params);
GLAPI PFNGLGETQUERYOBJECTI64VPROC biz_glGetQueryObjecti64v;
#define glGetQueryObjecti64v(...) WRAP_PFN(biz_glGetQueryObjecti64v, __VA_ARGS__)
typedef void (*PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 *params);
GLAPI PFNGLGETQUERYOBJECTUI64VPROC biz_glGetQueryObjectui64v;
#define glGetQueryObjectui64v(...) WRAP_PFN(biz_glGetQueryObjectui64v, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
GLAPI PFNGLVERTEXATTRIBDIVISORPROC biz_glVertexAttribDivisor;
#define glVertexAttribDivisor(...) WRAP_PFN(biz_glVertexAttribDivisor, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP1UIPROC biz_glVertexAttribP1ui;
#define glVertexAttribP1ui(...) WRAP_PFN(biz_glVertexAttribP1ui, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLAPI PFNGLVERTEXATTRIBP1UIVPROC biz_glVertexAttribP1uiv;
#define glVertexAttribP1uiv(...) WRAP_PFN(biz_glVertexAttribP1uiv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP2UIPROC biz_glVertexAttribP2ui;
#define glVertexAttribP2ui(...) WRAP_PFN(biz_glVertexAttribP2ui, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLAPI PFNGLVERTEXATTRIBP2UIVPROC biz_glVertexAttribP2uiv;
#define glVertexAttribP2uiv(...) WRAP_PFN(biz_glVertexAttribP2uiv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP3UIPROC biz_glVertexAttribP3ui;
#define glVertexAttribP3ui(...) WRAP_PFN(biz_glVertexAttribP3ui, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLAPI PFNGLVERTEXATTRIBP3UIVPROC biz_glVertexAttribP3uiv;
#define glVertexAttribP3uiv(...) WRAP_PFN(biz_glVertexAttribP3uiv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP4UIPROC biz_glVertexAttribP4ui;
#define glVertexAttribP4ui(...) WRAP_PFN(biz_glVertexAttribP4ui, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLAPI PFNGLVERTEXATTRIBP4UIVPROC biz_glVertexAttribP4uiv;
#define glVertexAttribP4uiv(...) WRAP_PFN(biz_glVertexAttribP4uiv, __VA_ARGS__)
typedef void (*PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
GLAPI PFNGLVERTEXP2UIPROC biz_glVertexP2ui;
#define glVertexP2ui(...) WRAP_PFN(biz_glVertexP2ui, __VA_ARGS__)
typedef void (*PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint *value);
GLAPI PFNGLVERTEXP2UIVPROC biz_glVertexP2uiv;
#define glVertexP2uiv(...) WRAP_PFN(biz_glVertexP2uiv, __VA_ARGS__)
typedef void (*PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
GLAPI PFNGLVERTEXP3UIPROC biz_glVertexP3ui;
#define glVertexP3ui(...) WRAP_PFN(biz_glVertexP3ui, __VA_ARGS__)
typedef void (*PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint *value);
GLAPI PFNGLVERTEXP3UIVPROC biz_glVertexP3uiv;
#define glVertexP3uiv(...) WRAP_PFN(biz_glVertexP3uiv, __VA_ARGS__)
typedef void (*PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
GLAPI PFNGLVERTEXP4UIPROC biz_glVertexP4ui;
#define glVertexP4ui(...) WRAP_PFN(biz_glVertexP4ui, __VA_ARGS__)
typedef void (*PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint *value);
GLAPI PFNGLVERTEXP4UIVPROC biz_glVertexP4uiv;
#define glVertexP4uiv(...) WRAP_PFN(biz_glVertexP4uiv, __VA_ARGS__)
typedef void (*PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP1UIPROC biz_glTexCoordP1ui;
#define glTexCoordP1ui(...) WRAP_PFN(biz_glTexCoordP1ui, __VA_ARGS__)
typedef void (*PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint *coords);
GLAPI PFNGLTEXCOORDP1UIVPROC biz_glTexCoordP1uiv;
#define glTexCoordP1uiv(...) WRAP_PFN(biz_glTexCoordP1uiv, __VA_ARGS__)
typedef void (*PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP2UIPROC biz_glTexCoordP2ui;
#define glTexCoordP2ui(...) WRAP_PFN(biz_glTexCoordP2ui, __VA_ARGS__)
typedef void (*PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint *coords);
GLAPI PFNGLTEXCOORDP2UIVPROC biz_glTexCoordP2uiv;
#define glTexCoordP2uiv(...) WRAP_PFN(biz_glTexCoordP2uiv, __VA_ARGS__)
typedef void (*PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP3UIPROC biz_glTexCoordP3ui;
#define glTexCoordP3ui(...) WRAP_PFN(biz_glTexCoordP3ui, __VA_ARGS__)
typedef void (*PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint *coords);
GLAPI PFNGLTEXCOORDP3UIVPROC biz_glTexCoordP3uiv;
#define glTexCoordP3uiv(...) WRAP_PFN(biz_glTexCoordP3uiv, __VA_ARGS__)
typedef void (*PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP4UIPROC biz_glTexCoordP4ui;
#define glTexCoordP4ui(...) WRAP_PFN(biz_glTexCoordP4ui, __VA_ARGS__)
typedef void (*PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint *coords);
GLAPI PFNGLTEXCOORDP4UIVPROC biz_glTexCoordP4uiv;
#define glTexCoordP4uiv(...) WRAP_PFN(biz_glTexCoordP4uiv, __VA_ARGS__)
typedef void (*PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP1UIPROC biz_glMultiTexCoordP1ui;
#define glMultiTexCoordP1ui(...) WRAP_PFN(biz_glMultiTexCoordP1ui, __VA_ARGS__)
typedef void (*PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
GLAPI PFNGLMULTITEXCOORDP1UIVPROC biz_glMultiTexCoordP1uiv;
#define glMultiTexCoordP1uiv(...) WRAP_PFN(biz_glMultiTexCoordP1uiv, __VA_ARGS__)
typedef void (*PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP2UIPROC biz_glMultiTexCoordP2ui;
#define glMultiTexCoordP2ui(...) WRAP_PFN(biz_glMultiTexCoordP2ui, __VA_ARGS__)
typedef void (*PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
GLAPI PFNGLMULTITEXCOORDP2UIVPROC biz_glMultiTexCoordP2uiv;
#define glMultiTexCoordP2uiv(...) WRAP_PFN(biz_glMultiTexCoordP2uiv, __VA_ARGS__)
typedef void (*PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP3UIPROC biz_glMultiTexCoordP3ui;
#define glMultiTexCoordP3ui(...) WRAP_PFN(biz_glMultiTexCoordP3ui, __VA_ARGS__)
typedef void (*PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
GLAPI PFNGLMULTITEXCOORDP3UIVPROC biz_glMultiTexCoordP3uiv;
#define glMultiTexCoordP3uiv(...) WRAP_PFN(biz_glMultiTexCoordP3uiv, __VA_ARGS__)
typedef void (*PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP4UIPROC biz_glMultiTexCoordP4ui;
#define glMultiTexCoordP4ui(...) WRAP_PFN(biz_glMultiTexCoordP4ui, __VA_ARGS__)
typedef void (*PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
GLAPI PFNGLMULTITEXCOORDP4UIVPROC biz_glMultiTexCoordP4uiv;
#define glMultiTexCoordP4uiv(...) WRAP_PFN(biz_glMultiTexCoordP4uiv, __VA_ARGS__)
typedef void (*PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLNORMALP3UIPROC biz_glNormalP3ui;
#define glNormalP3ui(...) WRAP_PFN(biz_glNormalP3ui, __VA_ARGS__)
typedef void (*PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint *coords);
GLAPI PFNGLNORMALP3UIVPROC biz_glNormalP3uiv;
#define glNormalP3uiv(...) WRAP_PFN(biz_glNormalP3uiv, __VA_ARGS__)
typedef void (*PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
GLAPI PFNGLCOLORP3UIPROC biz_glColorP3ui;
#define glColorP3ui(...) WRAP_PFN(biz_glColorP3ui, __VA_ARGS__)
typedef void (*PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint *color);
GLAPI PFNGLCOLORP3UIVPROC biz_glColorP3uiv;
#define glColorP3uiv(...) WRAP_PFN(biz_glColorP3uiv, __VA_ARGS__)
typedef void (*PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
GLAPI PFNGLCOLORP4UIPROC biz_glColorP4ui;
#define glColorP4ui(...) WRAP_PFN(biz_glColorP4ui, __VA_ARGS__)
typedef void (*PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint *color);
GLAPI PFNGLCOLORP4UIVPROC biz_glColorP4uiv;
#define glColorP4uiv(...) WRAP_PFN(biz_glColorP4uiv, __VA_ARGS__)
typedef void (*PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
GLAPI PFNGLSECONDARYCOLORP3UIPROC biz_glSecondaryColorP3ui;
#define glSecondaryColorP3ui(...) WRAP_PFN(biz_glSecondaryColorP3ui, __VA_ARGS__)
typedef void (*PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint *color);
GLAPI PFNGLSECONDARYCOLORP3UIVPROC biz_glSecondaryColorP3uiv;
#define glSecondaryColorP3uiv(...) WRAP_PFN(biz_glSecondaryColorP3uiv, __VA_ARGS__)

#define GL_VERSION_4_0 1
typedef void (*PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
GLAPI PFNGLMINSAMPLESHADINGPROC biz_glMinSampleShading;
#define glMinSampleShading(...) WRAP_PFN(biz_glMinSampleShading, __VA_ARGS__)
typedef void (*PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
GLAPI PFNGLBLENDEQUATIONIPROC biz_glBlendEquationi;
#define glBlendEquationi(...) WRAP_PFN(biz_glBlendEquationi, __VA_ARGS__)
typedef void (*PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
GLAPI PFNGLBLENDEQUATIONSEPARATEIPROC biz_glBlendEquationSeparatei;
#define glBlendEquationSeparatei(...) WRAP_PFN(biz_glBlendEquationSeparatei, __VA_ARGS__)
typedef void (*PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
GLAPI PFNGLBLENDFUNCIPROC biz_glBlendFunci;
#define glBlendFunci(...) WRAP_PFN(biz_glBlendFunci, __VA_ARGS__)
typedef void (*PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
GLAPI PFNGLBLENDFUNCSEPARATEIPROC biz_glBlendFuncSeparatei;
#define glBlendFuncSeparatei(...) WRAP_PFN(biz_glBlendFuncSeparatei, __VA_ARGS__)
typedef void (*PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void *indirect);
GLAPI PFNGLDRAWARRAYSINDIRECTPROC biz_glDrawArraysIndirect;
#define glDrawArraysIndirect(...) WRAP_PFN(biz_glDrawArraysIndirect, __VA_ARGS__)
typedef void (*PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void *indirect);
GLAPI PFNGLDRAWELEMENTSINDIRECTPROC biz_glDrawElementsIndirect;
#define glDrawElementsIndirect(...) WRAP_PFN(biz_glDrawElementsIndirect, __VA_ARGS__)
typedef void (*PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
GLAPI PFNGLUNIFORM1DPROC biz_glUniform1d;
#define glUniform1d(...) WRAP_PFN(biz_glUniform1d, __VA_ARGS__)
typedef void (*PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
GLAPI PFNGLUNIFORM2DPROC biz_glUniform2d;
#define glUniform2d(...) WRAP_PFN(biz_glUniform2d, __VA_ARGS__)
typedef void (*PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLUNIFORM3DPROC biz_glUniform3d;
#define glUniform3d(...) WRAP_PFN(biz_glUniform3d, __VA_ARGS__)
typedef void (*PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLUNIFORM4DPROC biz_glUniform4d;
#define glUniform4d(...) WRAP_PFN(biz_glUniform4d, __VA_ARGS__)
typedef void (*PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLUNIFORM1DVPROC biz_glUniform1dv;
#define glUniform1dv(...) WRAP_PFN(biz_glUniform1dv, __VA_ARGS__)
typedef void (*PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLUNIFORM2DVPROC biz_glUniform2dv;
#define glUniform2dv(...) WRAP_PFN(biz_glUniform2dv, __VA_ARGS__)
typedef void (*PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLUNIFORM3DVPROC biz_glUniform3dv;
#define glUniform3dv(...) WRAP_PFN(biz_glUniform3dv, __VA_ARGS__)
typedef void (*PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLUNIFORM4DVPROC biz_glUniform4dv;
#define glUniform4dv(...) WRAP_PFN(biz_glUniform4dv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX2DVPROC biz_glUniformMatrix2dv;
#define glUniformMatrix2dv(...) WRAP_PFN(biz_glUniformMatrix2dv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX3DVPROC biz_glUniformMatrix3dv;
#define glUniformMatrix3dv(...) WRAP_PFN(biz_glUniformMatrix3dv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX4DVPROC biz_glUniformMatrix4dv;
#define glUniformMatrix4dv(...) WRAP_PFN(biz_glUniformMatrix4dv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX2X3DVPROC biz_glUniformMatrix2x3dv;
#define glUniformMatrix2x3dv(...) WRAP_PFN(biz_glUniformMatrix2x3dv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX2X4DVPROC biz_glUniformMatrix2x4dv;
#define glUniformMatrix2x4dv(...) WRAP_PFN(biz_glUniformMatrix2x4dv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX3X2DVPROC biz_glUniformMatrix3x2dv;
#define glUniformMatrix3x2dv(...) WRAP_PFN(biz_glUniformMatrix3x2dv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX3X4DVPROC biz_glUniformMatrix3x4dv;
#define glUniformMatrix3x4dv(...) WRAP_PFN(biz_glUniformMatrix3x4dv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX4X2DVPROC biz_glUniformMatrix4x2dv;
#define glUniformMatrix4x2dv(...) WRAP_PFN(biz_glUniformMatrix4x2dv, __VA_ARGS__)
typedef void (*PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX4X3DVPROC biz_glUniformMatrix4x3dv;
#define glUniformMatrix4x3dv(...) WRAP_PFN(biz_glUniformMatrix4x3dv, __VA_ARGS__)
typedef void (*PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble *params);
GLAPI PFNGLGETUNIFORMDVPROC biz_glGetUniformdv;
#define glGetUniformdv(...) WRAP_PFN(biz_glGetUniformdv, __VA_ARGS__)
typedef GLint (*PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar *name);
GLAPI PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC biz_glGetSubroutineUniformLocation;
#define glGetSubroutineUniformLocation(...) WRAP_PFN(biz_glGetSubroutineUniformLocation, __VA_ARGS__)
typedef GLuint (*PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar *name);
GLAPI PFNGLGETSUBROUTINEINDEXPROC biz_glGetSubroutineIndex;
#define glGetSubroutineIndex(...) WRAP_PFN(biz_glGetSubroutineIndex, __VA_ARGS__)
typedef void (*PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC biz_glGetActiveSubroutineUniformiv;
#define glGetActiveSubroutineUniformiv(...) WRAP_PFN(biz_glGetActiveSubroutineUniformiv, __VA_ARGS__)
typedef void (*PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC biz_glGetActiveSubroutineUniformName;
#define glGetActiveSubroutineUniformName(...) WRAP_PFN(biz_glGetActiveSubroutineUniformName, __VA_ARGS__)
typedef void (*PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GLAPI PFNGLGETACTIVESUBROUTINENAMEPROC biz_glGetActiveSubroutineName;
#define glGetActiveSubroutineName(...) WRAP_PFN(biz_glGetActiveSubroutineName, __VA_ARGS__)
typedef void (*PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint *indices);
GLAPI PFNGLUNIFORMSUBROUTINESUIVPROC biz_glUniformSubroutinesuiv;
#define glUniformSubroutinesuiv(...) WRAP_PFN(biz_glUniformSubroutinesuiv, __VA_ARGS__)
typedef void (*PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint *params);
GLAPI PFNGLGETUNIFORMSUBROUTINEUIVPROC biz_glGetUniformSubroutineuiv;
#define glGetUniformSubroutineuiv(...) WRAP_PFN(biz_glGetUniformSubroutineuiv, __VA_ARGS__)
typedef void (*PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
GLAPI PFNGLGETPROGRAMSTAGEIVPROC biz_glGetProgramStageiv;
#define glGetProgramStageiv(...) WRAP_PFN(biz_glGetProgramStageiv, __VA_ARGS__)
typedef void (*PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
GLAPI PFNGLPATCHPARAMETERIPROC biz_glPatchParameteri;
#define glPatchParameteri(...) WRAP_PFN(biz_glPatchParameteri, __VA_ARGS__)
typedef void (*PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat *values);
GLAPI PFNGLPATCHPARAMETERFVPROC biz_glPatchParameterfv;
#define glPatchParameterfv(...) WRAP_PFN(biz_glPatchParameterfv, __VA_ARGS__)
typedef void (*PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
GLAPI PFNGLBINDTRANSFORMFEEDBACKPROC biz_glBindTransformFeedback;
#define glBindTransformFeedback(...) WRAP_PFN(biz_glBindTransformFeedback, __VA_ARGS__)
typedef void (*PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint *ids);
GLAPI PFNGLDELETETRANSFORMFEEDBACKSPROC biz_glDeleteTransformFeedbacks;
#define glDeleteTransformFeedbacks(...) WRAP_PFN(biz_glDeleteTransformFeedbacks, __VA_ARGS__)
typedef void (*PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
GLAPI PFNGLGENTRANSFORMFEEDBACKSPROC biz_glGenTransformFeedbacks;
#define glGenTransformFeedbacks(...) WRAP_PFN(biz_glGenTransformFeedbacks, __VA_ARGS__)
typedef GLboolean (*PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
GLAPI PFNGLISTRANSFORMFEEDBACKPROC biz_glIsTransformFeedback;
#define glIsTransformFeedback(...) WRAP_PFN(biz_glIsTransformFeedback, __VA_ARGS__)
typedef void (*PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
GLAPI PFNGLPAUSETRANSFORMFEEDBACKPROC biz_glPauseTransformFeedback;
#define glPauseTransformFeedback(...) WRAP_PFN(biz_glPauseTransformFeedback, __VA_ARGS__)
typedef void (*PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
GLAPI PFNGLRESUMETRANSFORMFEEDBACKPROC biz_glResumeTransformFeedback;
#define glResumeTransformFeedback(...) WRAP_PFN(biz_glResumeTransformFeedback, __VA_ARGS__)
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKPROC biz_glDrawTransformFeedback;
#define glDrawTransformFeedback(...) WRAP_PFN(biz_glDrawTransformFeedback, __VA_ARGS__)
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC biz_glDrawTransformFeedbackStream;
#define glDrawTransformFeedbackStream(...) WRAP_PFN(biz_glDrawTransformFeedbackStream, __VA_ARGS__)
typedef void (*PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
GLAPI PFNGLBEGINQUERYINDEXEDPROC biz_glBeginQueryIndexed;
#define glBeginQueryIndexed(...) WRAP_PFN(biz_glBeginQueryIndexed, __VA_ARGS__)
typedef void (*PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
GLAPI PFNGLENDQUERYINDEXEDPROC biz_glEndQueryIndexed;
#define glEndQueryIndexed(...) WRAP_PFN(biz_glEndQueryIndexed, __VA_ARGS__)
typedef void (*PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint *params);
GLAPI PFNGLGETQUERYINDEXEDIVPROC biz_glGetQueryIndexediv;
#define glGetQueryIndexediv(...) WRAP_PFN(biz_glGetQueryIndexediv, __VA_ARGS__)

#define GL_VERSION_4_1 1
typedef void (*PFNGLRELEASESHADERCOMPILERPROC)(void);
GLAPI PFNGLRELEASESHADERCOMPILERPROC biz_glReleaseShaderCompiler;
#define glReleaseShaderCompiler(...) WRAP_PFN(biz_glReleaseShaderCompiler, __VA_ARGS__)
typedef void (*PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length);
GLAPI PFNGLSHADERBINARYPROC biz_glShaderBinary;
#define glShaderBinary(...) WRAP_PFN(biz_glShaderBinary, __VA_ARGS__)
typedef void (*PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
GLAPI PFNGLGETSHADERPRECISIONFORMATPROC biz_glGetShaderPrecisionFormat;
#define glGetShaderPrecisionFormat(...) WRAP_PFN(biz_glGetShaderPrecisionFormat, __VA_ARGS__)
typedef void (*PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
GLAPI PFNGLDEPTHRANGEFPROC biz_glDepthRangef;
#define glDepthRangef(...) WRAP_PFN(biz_glDepthRangef, __VA_ARGS__)
typedef void (*PFNGLCLEARDEPTHFPROC)(GLfloat d);
GLAPI PFNGLCLEARDEPTHFPROC biz_glClearDepthf;
#define glClearDepthf(...) WRAP_PFN(biz_glClearDepthf, __VA_ARGS__)
typedef void (*PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
GLAPI PFNGLGETPROGRAMBINARYPROC biz_glGetProgramBinary;
#define glGetProgramBinary(...) WRAP_PFN(biz_glGetProgramBinary, __VA_ARGS__)
typedef void (*PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
GLAPI PFNGLPROGRAMBINARYPROC biz_glProgramBinary;
#define glProgramBinary(...) WRAP_PFN(biz_glProgramBinary, __VA_ARGS__)
typedef void (*PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
GLAPI PFNGLPROGRAMPARAMETERIPROC biz_glProgramParameteri;
#define glProgramParameteri(...) WRAP_PFN(biz_glProgramParameteri, __VA_ARGS__)
typedef void (*PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
GLAPI PFNGLUSEPROGRAMSTAGESPROC biz_glUseProgramStages;
#define glUseProgramStages(...) WRAP_PFN(biz_glUseProgramStages, __VA_ARGS__)
typedef void (*PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
GLAPI PFNGLACTIVESHADERPROGRAMPROC biz_glActiveShaderProgram;
#define glActiveShaderProgram(...) WRAP_PFN(biz_glActiveShaderProgram, __VA_ARGS__)
typedef GLuint (*PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const*strings);
GLAPI PFNGLCREATESHADERPROGRAMVPROC biz_glCreateShaderProgramv;
#define glCreateShaderProgramv(...) WRAP_PFN(biz_glCreateShaderProgramv, __VA_ARGS__)
typedef void (*PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLBINDPROGRAMPIPELINEPROC biz_glBindProgramPipeline;
#define glBindProgramPipeline(...) WRAP_PFN(biz_glBindProgramPipeline, __VA_ARGS__)
typedef void (*PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint *pipelines);
GLAPI PFNGLDELETEPROGRAMPIPELINESPROC biz_glDeleteProgramPipelines;
#define glDeleteProgramPipelines(...) WRAP_PFN(biz_glDeleteProgramPipelines, __VA_ARGS__)
typedef void (*PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
GLAPI PFNGLGENPROGRAMPIPELINESPROC biz_glGenProgramPipelines;
#define glGenProgramPipelines(...) WRAP_PFN(biz_glGenProgramPipelines, __VA_ARGS__)
typedef GLboolean (*PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLISPROGRAMPIPELINEPROC biz_glIsProgramPipeline;
#define glIsProgramPipeline(...) WRAP_PFN(biz_glIsProgramPipeline, __VA_ARGS__)
typedef void (*PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint *params);
GLAPI PFNGLGETPROGRAMPIPELINEIVPROC biz_glGetProgramPipelineiv;
#define glGetProgramPipelineiv(...) WRAP_PFN(biz_glGetProgramPipelineiv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
GLAPI PFNGLPROGRAMUNIFORM1IPROC biz_glProgramUniform1i;
#define glProgramUniform1i(...) WRAP_PFN(biz_glProgramUniform1i, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLPROGRAMUNIFORM1IVPROC biz_glProgramUniform1iv;
#define glProgramUniform1iv(...) WRAP_PFN(biz_glProgramUniform1iv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
GLAPI PFNGLPROGRAMUNIFORM1FPROC biz_glProgramUniform1f;
#define glProgramUniform1f(...) WRAP_PFN(biz_glProgramUniform1f, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORM1FVPROC biz_glProgramUniform1fv;
#define glProgramUniform1fv(...) WRAP_PFN(biz_glProgramUniform1fv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
GLAPI PFNGLPROGRAMUNIFORM1DPROC biz_glProgramUniform1d;
#define glProgramUniform1d(...) WRAP_PFN(biz_glProgramUniform1d, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORM1DVPROC biz_glProgramUniform1dv;
#define glProgramUniform1dv(...) WRAP_PFN(biz_glProgramUniform1dv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
GLAPI PFNGLPROGRAMUNIFORM1UIPROC biz_glProgramUniform1ui;
#define glProgramUniform1ui(...) WRAP_PFN(biz_glProgramUniform1ui, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLPROGRAMUNIFORM1UIVPROC biz_glProgramUniform1uiv;
#define glProgramUniform1uiv(...) WRAP_PFN(biz_glProgramUniform1uiv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
GLAPI PFNGLPROGRAMUNIFORM2IPROC biz_glProgramUniform2i;
#define glProgramUniform2i(...) WRAP_PFN(biz_glProgramUniform2i, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLPROGRAMUNIFORM2IVPROC biz_glProgramUniform2iv;
#define glProgramUniform2iv(...) WRAP_PFN(biz_glProgramUniform2iv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
GLAPI PFNGLPROGRAMUNIFORM2FPROC biz_glProgramUniform2f;
#define glProgramUniform2f(...) WRAP_PFN(biz_glProgramUniform2f, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORM2FVPROC biz_glProgramUniform2fv;
#define glProgramUniform2fv(...) WRAP_PFN(biz_glProgramUniform2fv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
GLAPI PFNGLPROGRAMUNIFORM2DPROC biz_glProgramUniform2d;
#define glProgramUniform2d(...) WRAP_PFN(biz_glProgramUniform2d, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORM2DVPROC biz_glProgramUniform2dv;
#define glProgramUniform2dv(...) WRAP_PFN(biz_glProgramUniform2dv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
GLAPI PFNGLPROGRAMUNIFORM2UIPROC biz_glProgramUniform2ui;
#define glProgramUniform2ui(...) WRAP_PFN(biz_glProgramUniform2ui, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLPROGRAMUNIFORM2UIVPROC biz_glProgramUniform2uiv;
#define glProgramUniform2uiv(...) WRAP_PFN(biz_glProgramUniform2uiv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
GLAPI PFNGLPROGRAMUNIFORM3IPROC biz_glProgramUniform3i;
#define glProgramUniform3i(...) WRAP_PFN(biz_glProgramUniform3i, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLPROGRAMUNIFORM3IVPROC biz_glProgramUniform3iv;
#define glProgramUniform3iv(...) WRAP_PFN(biz_glProgramUniform3iv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI PFNGLPROGRAMUNIFORM3FPROC biz_glProgramUniform3f;
#define glProgramUniform3f(...) WRAP_PFN(biz_glProgramUniform3f, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORM3FVPROC biz_glProgramUniform3fv;
#define glProgramUniform3fv(...) WRAP_PFN(biz_glProgramUniform3fv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
GLAPI PFNGLPROGRAMUNIFORM3DPROC biz_glProgramUniform3d;
#define glProgramUniform3d(...) WRAP_PFN(biz_glProgramUniform3d, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORM3DVPROC biz_glProgramUniform3dv;
#define glProgramUniform3dv(...) WRAP_PFN(biz_glProgramUniform3dv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI PFNGLPROGRAMUNIFORM3UIPROC biz_glProgramUniform3ui;
#define glProgramUniform3ui(...) WRAP_PFN(biz_glProgramUniform3ui, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLPROGRAMUNIFORM3UIVPROC biz_glProgramUniform3uiv;
#define glProgramUniform3uiv(...) WRAP_PFN(biz_glProgramUniform3uiv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI PFNGLPROGRAMUNIFORM4IPROC biz_glProgramUniform4i;
#define glProgramUniform4i(...) WRAP_PFN(biz_glProgramUniform4i, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLPROGRAMUNIFORM4IVPROC biz_glProgramUniform4iv;
#define glProgramUniform4iv(...) WRAP_PFN(biz_glProgramUniform4iv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI PFNGLPROGRAMUNIFORM4FPROC biz_glProgramUniform4f;
#define glProgramUniform4f(...) WRAP_PFN(biz_glProgramUniform4f, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORM4FVPROC biz_glProgramUniform4fv;
#define glProgramUniform4fv(...) WRAP_PFN(biz_glProgramUniform4fv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
GLAPI PFNGLPROGRAMUNIFORM4DPROC biz_glProgramUniform4d;
#define glProgramUniform4d(...) WRAP_PFN(biz_glProgramUniform4d, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORM4DVPROC biz_glProgramUniform4dv;
#define glProgramUniform4dv(...) WRAP_PFN(biz_glProgramUniform4dv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI PFNGLPROGRAMUNIFORM4UIPROC biz_glProgramUniform4ui;
#define glProgramUniform4ui(...) WRAP_PFN(biz_glProgramUniform4ui, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLPROGRAMUNIFORM4UIVPROC biz_glProgramUniform4uiv;
#define glProgramUniform4uiv(...) WRAP_PFN(biz_glProgramUniform4uiv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2FVPROC biz_glProgramUniformMatrix2fv;
#define glProgramUniformMatrix2fv(...) WRAP_PFN(biz_glProgramUniformMatrix2fv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3FVPROC biz_glProgramUniformMatrix3fv;
#define glProgramUniformMatrix3fv(...) WRAP_PFN(biz_glProgramUniformMatrix3fv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4FVPROC biz_glProgramUniformMatrix4fv;
#define glProgramUniformMatrix4fv(...) WRAP_PFN(biz_glProgramUniformMatrix4fv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2DVPROC biz_glProgramUniformMatrix2dv;
#define glProgramUniformMatrix2dv(...) WRAP_PFN(biz_glProgramUniformMatrix2dv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3DVPROC biz_glProgramUniformMatrix3dv;
#define glProgramUniformMatrix3dv(...) WRAP_PFN(biz_glProgramUniformMatrix3dv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4DVPROC biz_glProgramUniformMatrix4dv;
#define glProgramUniformMatrix4dv(...) WRAP_PFN(biz_glProgramUniformMatrix4dv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC biz_glProgramUniformMatrix2x3fv;
#define glProgramUniformMatrix2x3fv(...) WRAP_PFN(biz_glProgramUniformMatrix2x3fv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC biz_glProgramUniformMatrix3x2fv;
#define glProgramUniformMatrix3x2fv(...) WRAP_PFN(biz_glProgramUniformMatrix3x2fv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC biz_glProgramUniformMatrix2x4fv;
#define glProgramUniformMatrix2x4fv(...) WRAP_PFN(biz_glProgramUniformMatrix2x4fv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC biz_glProgramUniformMatrix4x2fv;
#define glProgramUniformMatrix4x2fv(...) WRAP_PFN(biz_glProgramUniformMatrix4x2fv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC biz_glProgramUniformMatrix3x4fv;
#define glProgramUniformMatrix3x4fv(...) WRAP_PFN(biz_glProgramUniformMatrix3x4fv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC biz_glProgramUniformMatrix4x3fv;
#define glProgramUniformMatrix4x3fv(...) WRAP_PFN(biz_glProgramUniformMatrix4x3fv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC biz_glProgramUniformMatrix2x3dv;
#define glProgramUniformMatrix2x3dv(...) WRAP_PFN(biz_glProgramUniformMatrix2x3dv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC biz_glProgramUniformMatrix3x2dv;
#define glProgramUniformMatrix3x2dv(...) WRAP_PFN(biz_glProgramUniformMatrix3x2dv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC biz_glProgramUniformMatrix2x4dv;
#define glProgramUniformMatrix2x4dv(...) WRAP_PFN(biz_glProgramUniformMatrix2x4dv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC biz_glProgramUniformMatrix4x2dv;
#define glProgramUniformMatrix4x2dv(...) WRAP_PFN(biz_glProgramUniformMatrix4x2dv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC biz_glProgramUniformMatrix3x4dv;
#define glProgramUniformMatrix3x4dv(...) WRAP_PFN(biz_glProgramUniformMatrix3x4dv, __VA_ARGS__)
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC biz_glProgramUniformMatrix4x3dv;
#define glProgramUniformMatrix4x3dv(...) WRAP_PFN(biz_glProgramUniformMatrix4x3dv, __VA_ARGS__)
typedef void (*PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLVALIDATEPROGRAMPIPELINEPROC biz_glValidateProgramPipeline;
#define glValidateProgramPipeline(...) WRAP_PFN(biz_glValidateProgramPipeline, __VA_ARGS__)
typedef void (*PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI PFNGLGETPROGRAMPIPELINEINFOLOGPROC biz_glGetProgramPipelineInfoLog;
#define glGetProgramPipelineInfoLog(...) WRAP_PFN(biz_glGetProgramPipelineInfoLog, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
GLAPI PFNGLVERTEXATTRIBL1DPROC biz_glVertexAttribL1d;
#define glVertexAttribL1d(...) WRAP_PFN(biz_glVertexAttribL1d, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXATTRIBL2DPROC biz_glVertexAttribL2d;
#define glVertexAttribL2d(...) WRAP_PFN(biz_glVertexAttribL2d, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXATTRIBL3DPROC biz_glVertexAttribL3d;
#define glVertexAttribL3d(...) WRAP_PFN(biz_glVertexAttribL3d, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXATTRIBL4DPROC biz_glVertexAttribL4d;
#define glVertexAttribL4d(...) WRAP_PFN(biz_glVertexAttribL4d, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIBL1DVPROC biz_glVertexAttribL1dv;
#define glVertexAttribL1dv(...) WRAP_PFN(biz_glVertexAttribL1dv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIBL2DVPROC biz_glVertexAttribL2dv;
#define glVertexAttribL2dv(...) WRAP_PFN(biz_glVertexAttribL2dv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIBL3DVPROC biz_glVertexAttribL3dv;
#define glVertexAttribL3dv(...) WRAP_PFN(biz_glVertexAttribL3dv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIBL4DVPROC biz_glVertexAttribL4dv;
#define glVertexAttribL4dv(...) WRAP_PFN(biz_glVertexAttribL4dv, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
GLAPI PFNGLVERTEXATTRIBLPOINTERPROC biz_glVertexAttribLPointer;
#define glVertexAttribLPointer(...) WRAP_PFN(biz_glVertexAttribLPointer, __VA_ARGS__)
typedef void (*PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble *params);
GLAPI PFNGLGETVERTEXATTRIBLDVPROC biz_glGetVertexAttribLdv;
#define glGetVertexAttribLdv(...) WRAP_PFN(biz_glGetVertexAttribLdv, __VA_ARGS__)
typedef void (*PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat *v);
GLAPI PFNGLVIEWPORTARRAYVPROC biz_glViewportArrayv;
#define glViewportArrayv(...) WRAP_PFN(biz_glViewportArrayv, __VA_ARGS__)
typedef void (*PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
GLAPI PFNGLVIEWPORTINDEXEDFPROC biz_glViewportIndexedf;
#define glViewportIndexedf(...) WRAP_PFN(biz_glViewportIndexedf, __VA_ARGS__)
typedef void (*PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVIEWPORTINDEXEDFVPROC biz_glViewportIndexedfv;
#define glViewportIndexedfv(...) WRAP_PFN(biz_glViewportIndexedfv, __VA_ARGS__)
typedef void (*PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint *v);
GLAPI PFNGLSCISSORARRAYVPROC biz_glScissorArrayv;
#define glScissorArrayv(...) WRAP_PFN(biz_glScissorArrayv, __VA_ARGS__)
typedef void (*PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
GLAPI PFNGLSCISSORINDEXEDPROC biz_glScissorIndexed;
#define glScissorIndexed(...) WRAP_PFN(biz_glScissorIndexed, __VA_ARGS__)
typedef void (*PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLSCISSORINDEXEDVPROC biz_glScissorIndexedv;
#define glScissorIndexedv(...) WRAP_PFN(biz_glScissorIndexedv, __VA_ARGS__)
typedef void (*PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble *v);
GLAPI PFNGLDEPTHRANGEARRAYVPROC biz_glDepthRangeArrayv;
#define glDepthRangeArrayv(...) WRAP_PFN(biz_glDepthRangeArrayv, __VA_ARGS__)
typedef void (*PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
GLAPI PFNGLDEPTHRANGEINDEXEDPROC biz_glDepthRangeIndexed;
#define glDepthRangeIndexed(...) WRAP_PFN(biz_glDepthRangeIndexed, __VA_ARGS__)
typedef void (*PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat *data);
GLAPI PFNGLGETFLOATI_VPROC biz_glGetFloati_v;
#define glGetFloati_v(...) WRAP_PFN(biz_glGetFloati_v, __VA_ARGS__)
typedef void (*PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble *data);
GLAPI PFNGLGETDOUBLEI_VPROC biz_glGetDoublei_v;
#define glGetDoublei_v(...) WRAP_PFN(biz_glGetDoublei_v, __VA_ARGS__)

#define GL_VERSION_4_2 1
typedef void (*PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
GLAPI PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC biz_glDrawArraysInstancedBaseInstance;
#define glDrawArraysInstancedBaseInstance(...) WRAP_PFN(biz_glDrawArraysInstancedBaseInstance, __VA_ARGS__)
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC biz_glDrawElementsInstancedBaseInstance;
#define glDrawElementsInstancedBaseInstance(...) WRAP_PFN(biz_glDrawElementsInstancedBaseInstance, __VA_ARGS__)
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC biz_glDrawElementsInstancedBaseVertexBaseInstance;
#define glDrawElementsInstancedBaseVertexBaseInstance(...) WRAP_PFN(biz_glDrawElementsInstancedBaseVertexBaseInstance, __VA_ARGS__)
typedef void (*PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params);
GLAPI PFNGLGETINTERNALFORMATIVPROC biz_glGetInternalformativ;
#define glGetInternalformativ(...) WRAP_PFN(biz_glGetInternalformativ, __VA_ARGS__)
typedef void (*PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
GLAPI PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC biz_glGetActiveAtomicCounterBufferiv;
#define glGetActiveAtomicCounterBufferiv(...) WRAP_PFN(biz_glGetActiveAtomicCounterBufferiv, __VA_ARGS__)
typedef void (*PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
GLAPI PFNGLBINDIMAGETEXTUREPROC biz_glBindImageTexture;
#define glBindImageTexture(...) WRAP_PFN(biz_glBindImageTexture, __VA_ARGS__)
typedef void (*PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
GLAPI PFNGLMEMORYBARRIERPROC biz_glMemoryBarrier;
#define glMemoryBarrier(...) WRAP_PFN(biz_glMemoryBarrier, __VA_ARGS__)
typedef void (*PFNGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
GLAPI PFNGLTEXSTORAGE1DPROC biz_glTexStorage1D;
#define glTexStorage1D(...) WRAP_PFN(biz_glTexStorage1D, __VA_ARGS__)
typedef void (*PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLTEXSTORAGE2DPROC biz_glTexStorage2D;
#define glTexStorage2D(...) WRAP_PFN(biz_glTexStorage2D, __VA_ARGS__)
typedef void (*PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLTEXSTORAGE3DPROC biz_glTexStorage3D;
#define glTexStorage3D(...) WRAP_PFN(biz_glTexStorage3D, __VA_ARGS__)
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei instancecount);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC biz_glDrawTransformFeedbackInstanced;
#define glDrawTransformFeedbackInstanced(...) WRAP_PFN(biz_glDrawTransformFeedbackInstanced, __VA_ARGS__)
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC biz_glDrawTransformFeedbackStreamInstanced;
#define glDrawTransformFeedbackStreamInstanced(...) WRAP_PFN(biz_glDrawTransformFeedbackStreamInstanced, __VA_ARGS__)

#define GL_VERSION_4_3 1
typedef void (*PFNGLCLEARBUFFERDATAPROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
GLAPI PFNGLCLEARBUFFERDATAPROC biz_glClearBufferData;
#define glClearBufferData(...) WRAP_PFN(biz_glClearBufferData, __VA_ARGS__)
typedef void (*PFNGLCLEARBUFFERSUBDATAPROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
GLAPI PFNGLCLEARBUFFERSUBDATAPROC biz_glClearBufferSubData;
#define glClearBufferSubData(...) WRAP_PFN(biz_glClearBufferSubData, __VA_ARGS__)
typedef void (*PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
GLAPI PFNGLDISPATCHCOMPUTEPROC biz_glDispatchCompute;
#define glDispatchCompute(...) WRAP_PFN(biz_glDispatchCompute, __VA_ARGS__)
typedef void (*PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
GLAPI PFNGLDISPATCHCOMPUTEINDIRECTPROC biz_glDispatchComputeIndirect;
#define glDispatchComputeIndirect(...) WRAP_PFN(biz_glDispatchComputeIndirect, __VA_ARGS__)
typedef void (*PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
GLAPI PFNGLCOPYIMAGESUBDATAPROC biz_glCopyImageSubData;
#define glCopyImageSubData(...) WRAP_PFN(biz_glCopyImageSubData, __VA_ARGS__)
typedef void (*PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLFRAMEBUFFERPARAMETERIPROC biz_glFramebufferParameteri;
#define glFramebufferParameteri(...) WRAP_PFN(biz_glFramebufferParameteri, __VA_ARGS__)
typedef void (*PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
GLAPI PFNGLGETFRAMEBUFFERPARAMETERIVPROC biz_glGetFramebufferParameteriv;
#define glGetFramebufferParameteriv(...) WRAP_PFN(biz_glGetFramebufferParameteriv, __VA_ARGS__)
typedef void (*PFNGLGETINTERNALFORMATI64VPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params);
GLAPI PFNGLGETINTERNALFORMATI64VPROC biz_glGetInternalformati64v;
#define glGetInternalformati64v(...) WRAP_PFN(biz_glGetInternalformati64v, __VA_ARGS__)
typedef void (*PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLINVALIDATETEXSUBIMAGEPROC biz_glInvalidateTexSubImage;
#define glInvalidateTexSubImage(...) WRAP_PFN(biz_glInvalidateTexSubImage, __VA_ARGS__)
typedef void (*PFNGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
GLAPI PFNGLINVALIDATETEXIMAGEPROC biz_glInvalidateTexImage;
#define glInvalidateTexImage(...) WRAP_PFN(biz_glInvalidateTexImage, __VA_ARGS__)
typedef void (*PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLINVALIDATEBUFFERSUBDATAPROC biz_glInvalidateBufferSubData;
#define glInvalidateBufferSubData(...) WRAP_PFN(biz_glInvalidateBufferSubData, __VA_ARGS__)
typedef void (*PFNGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
GLAPI PFNGLINVALIDATEBUFFERDATAPROC biz_glInvalidateBufferData;
#define glInvalidateBufferData(...) WRAP_PFN(biz_glInvalidateBufferData, __VA_ARGS__)
typedef void (*PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
GLAPI PFNGLINVALIDATEFRAMEBUFFERPROC biz_glInvalidateFramebuffer;
#define glInvalidateFramebuffer(...) WRAP_PFN(biz_glInvalidateFramebuffer, __VA_ARGS__)
typedef void (*PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLINVALIDATESUBFRAMEBUFFERPROC biz_glInvalidateSubFramebuffer;
#define glInvalidateSubFramebuffer(...) WRAP_PFN(biz_glInvalidateSubFramebuffer, __VA_ARGS__)
typedef void (*PFNGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTPROC biz_glMultiDrawArraysIndirect;
#define glMultiDrawArraysIndirect(...) WRAP_PFN(biz_glMultiDrawArraysIndirect, __VA_ARGS__)
typedef void (*PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTPROC biz_glMultiDrawElementsIndirect;
#define glMultiDrawElementsIndirect(...) WRAP_PFN(biz_glMultiDrawElementsIndirect, __VA_ARGS__)
typedef void (*PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
GLAPI PFNGLGETPROGRAMINTERFACEIVPROC biz_glGetProgramInterfaceiv;
#define glGetProgramInterfaceiv(...) WRAP_PFN(biz_glGetProgramInterfaceiv, __VA_ARGS__)
typedef GLuint (*PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar *name);
GLAPI PFNGLGETPROGRAMRESOURCEINDEXPROC biz_glGetProgramResourceIndex;
#define glGetProgramResourceIndex(...) WRAP_PFN(biz_glGetProgramResourceIndex, __VA_ARGS__)
typedef void (*PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GLAPI PFNGLGETPROGRAMRESOURCENAMEPROC biz_glGetProgramResourceName;
#define glGetProgramResourceName(...) WRAP_PFN(biz_glGetProgramResourceName, __VA_ARGS__)
typedef void (*PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params);
GLAPI PFNGLGETPROGRAMRESOURCEIVPROC biz_glGetProgramResourceiv;
#define glGetProgramResourceiv(...) WRAP_PFN(biz_glGetProgramResourceiv, __VA_ARGS__)
typedef GLint (*PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar *name);
GLAPI PFNGLGETPROGRAMRESOURCELOCATIONPROC biz_glGetProgramResourceLocation;
#define glGetProgramResourceLocation(...) WRAP_PFN(biz_glGetProgramResourceLocation, __VA_ARGS__)
typedef GLint (*PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, GLenum programInterface, const GLchar *name);
GLAPI PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC biz_glGetProgramResourceLocationIndex;
#define glGetProgramResourceLocationIndex(...) WRAP_PFN(biz_glGetProgramResourceLocationIndex, __VA_ARGS__)
typedef void (*PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
GLAPI PFNGLSHADERSTORAGEBLOCKBINDINGPROC biz_glShaderStorageBlockBinding;
#define glShaderStorageBlockBinding(...) WRAP_PFN(biz_glShaderStorageBlockBinding, __VA_ARGS__)
typedef void (*PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTEXBUFFERRANGEPROC biz_glTexBufferRange;
#define glTexBufferRange(...) WRAP_PFN(biz_glTexBufferRange, __VA_ARGS__)
typedef void (*PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXSTORAGE2DMULTISAMPLEPROC biz_glTexStorage2DMultisample;
#define glTexStorage2DMultisample(...) WRAP_PFN(biz_glTexStorage2DMultisample, __VA_ARGS__)
typedef void (*PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXSTORAGE3DMULTISAMPLEPROC biz_glTexStorage3DMultisample;
#define glTexStorage3DMultisample(...) WRAP_PFN(biz_glTexStorage3DMultisample, __VA_ARGS__)
typedef void (*PFNGLTEXTUREVIEWPROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
GLAPI PFNGLTEXTUREVIEWPROC biz_glTextureView;
#define glTextureView(...) WRAP_PFN(biz_glTextureView, __VA_ARGS__)
typedef void (*PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI PFNGLBINDVERTEXBUFFERPROC biz_glBindVertexBuffer;
#define glBindVertexBuffer(...) WRAP_PFN(biz_glBindVertexBuffer, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBFORMATPROC biz_glVertexAttribFormat;
#define glVertexAttribFormat(...) WRAP_PFN(biz_glVertexAttribFormat, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBIFORMATPROC biz_glVertexAttribIFormat;
#define glVertexAttribIFormat(...) WRAP_PFN(biz_glVertexAttribIFormat, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBLFORMATPROC biz_glVertexAttribLFormat;
#define glVertexAttribLFormat(...) WRAP_PFN(biz_glVertexAttribLFormat, __VA_ARGS__)
typedef void (*PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
GLAPI PFNGLVERTEXATTRIBBINDINGPROC biz_glVertexAttribBinding;
#define glVertexAttribBinding(...) WRAP_PFN(biz_glVertexAttribBinding, __VA_ARGS__)
typedef void (*PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
GLAPI PFNGLVERTEXBINDINGDIVISORPROC biz_glVertexBindingDivisor;
#define glVertexBindingDivisor(...) WRAP_PFN(biz_glVertexBindingDivisor, __VA_ARGS__)
typedef void (*PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
GLAPI PFNGLDEBUGMESSAGECONTROLPROC biz_glDebugMessageControl;
#define glDebugMessageControl(...) WRAP_PFN(biz_glDebugMessageControl, __VA_ARGS__)
typedef void (*PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
GLAPI PFNGLDEBUGMESSAGEINSERTPROC biz_glDebugMessageInsert;
#define glDebugMessageInsert(...) WRAP_PFN(biz_glDebugMessageInsert, __VA_ARGS__)
typedef void (*PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void *userParam);
GLAPI PFNGLDEBUGMESSAGECALLBACKPROC biz_glDebugMessageCallback;
#define glDebugMessageCallback(...) WRAP_PFN(biz_glDebugMessageCallback, __VA_ARGS__)
typedef GLuint (*PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
GLAPI PFNGLGETDEBUGMESSAGELOGPROC biz_glGetDebugMessageLog;
#define glGetDebugMessageLog(...) WRAP_PFN(biz_glGetDebugMessageLog, __VA_ARGS__)
typedef void (*PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
GLAPI PFNGLPUSHDEBUGGROUPPROC biz_glPushDebugGroup;
#define glPushDebugGroup(...) WRAP_PFN(biz_glPushDebugGroup, __VA_ARGS__)
typedef void (*PFNGLPOPDEBUGGROUPPROC)(void);
GLAPI PFNGLPOPDEBUGGROUPPROC biz_glPopDebugGroup;
#define glPopDebugGroup(...) WRAP_PFN(biz_glPopDebugGroup, __VA_ARGS__)
typedef void (*PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
GLAPI PFNGLOBJECTLABELPROC biz_glObjectLabel;
#define glObjectLabel(...) WRAP_PFN(biz_glObjectLabel, __VA_ARGS__)
typedef void (*PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
GLAPI PFNGLGETOBJECTLABELPROC biz_glGetObjectLabel;
#define glGetObjectLabel(...) WRAP_PFN(biz_glGetObjectLabel, __VA_ARGS__)
typedef void (*PFNGLOBJECTPTRLABELPROC)(const void *ptr, GLsizei length, const GLchar *label);
GLAPI PFNGLOBJECTPTRLABELPROC biz_glObjectPtrLabel;
#define glObjectPtrLabel(...) WRAP_PFN(biz_glObjectPtrLabel, __VA_ARGS__)
typedef void (*PFNGLGETOBJECTPTRLABELPROC)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
GLAPI PFNGLGETOBJECTPTRLABELPROC biz_glGetObjectPtrLabel;
#define glGetObjectPtrLabel(...) WRAP_PFN(biz_glGetObjectPtrLabel, __VA_ARGS__)
typedef void (*PFNGLGETPOINTERVPROC)(GLenum pname, void **params);
GLAPI PFNGLGETPOINTERVPROC biz_glGetPointerv;
#define glGetPointerv(...) WRAP_PFN(biz_glGetPointerv, __VA_ARGS__)

#endif
