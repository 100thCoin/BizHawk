image: mcr.microsoft.com/dotnet/core/sdk:3.1

stages:
  - build
  - test
  - package

build:
  artifacts:
    expire_in: "30 minutes"
    name: "BizHawk_tempbuild_${CI_COMMIT_REF_SLUG}_$CI_COMMIT_SHORT_SHA"
    paths:
      - output
      - test_output
  script:
    - if [ "$CI_COMMIT_REF_SLUG" == "release" ]; then Dist/UpdateVersionInfoForRelease.sh; fi
    - Dist/BuildRelease.sh
  stage: build

check_style:
  allow_failure: true
  dependencies: []
  rules:
    - if: '$BIZHAWKBUILD_USE_ANALYZERS != null'
      when: always
  script:
    - Dist/BuildRelease.sh -p:MachineRunAnalyzersDuringBuild=true || Dist/BuildRelease.sh -p:MachineRunAnalyzersDuringBuild=true
  stage: test

package:
  artifacts:
    expire_in: "1 month"
    name: "BizHawk_devbuild_${CI_COMMIT_REF_SLUG}_$CI_COMMIT_SHORT_SHA"
    paths:
      - ./*
  image: ubuntu:focal
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "master" || $CI_COMMIT_REF_SLUG == "release"'
      when: always
  script:
    - su -c "apt-get update && apt-get -y install p7zip-full"
    - Dist/Package.sh
      # now we replace $CI_PROJECT_DIR with $CI_PROJECT_DIR/packaged_output, so that the archival step will put everything at the top level
    - mv packaged_output ..
    - cd ..
    - rm -fr $CI_PROJECT_DIR
    - mv packaged_output $CI_PROJECT_DIR
  stage: package

run_tests:
  artifacts:
    paths:
      - test_output/*.coverage.xml
    reports:
      junit:
        - test_output/*.coverage.xml
  dependencies: []
  image: mcr.microsoft.com/dotnet/core/sdk:3.1
  script:
    - Dist/BuildTestRelease.sh || Dist/BuildTestRelease.sh
  stage: test

#cache:
#  key: "$CI_COMMIT_REF_SLUG"
#  paths:
#    - $HOME/.nuget/packages # probably won't work; set NUGET_PACKAGES to `BizHawk_master/.nuget_packages` and cache that
